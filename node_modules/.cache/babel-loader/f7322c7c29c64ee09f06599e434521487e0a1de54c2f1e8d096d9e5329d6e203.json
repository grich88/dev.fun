{"ast":null,"code":"import CryptoJS from'crypto-js';import{v4 as uuidv4}from'uuid';export class GameService{constructor(){this.games=new Map();this.players=new Map();this.houseWallet='HOUSE_WALLET_MOCK';this.entryFee=5;// PUMP tokens\nthis.houseFee=0.05;// 5%\nthis.initialized=false;}initialize(){if(this.initialized)return;console.log('🎲 GameService initialized');this.initialized=true;// Mock some initial data - increase house balance to handle larger bets\nthis.mockHouseBalance=1000000;// 1 million PUMP tokens\n}// Generate pseudo-random coin flip using current timestamp and player address\ngenerateCoinFlip(gameId,playerAddress){const seed=Date.now().toString()+gameId+playerAddress;const hash=CryptoJS.SHA256(seed).toString();const randomValue=parseInt(hash.substring(0,8),16);return randomValue%2===0?'heads':'tails';}// Join multiplayer game\nasync joinMultiplayerGame(playerAddress){var _gameData$players$gam;console.log('🎮 Joining multiplayer game:',playerAddress);// Simulate wallet balance check\nawait this.simulateDelay(500);if(!playerAddress){throw new Error('Wallet not connected');}// Find existing game or create new one\nlet gameId=this.findActiveMultiplayerGame();let gameData;if(!gameId){// Create new game\ngameId=uuidv4();gameData={gameId,type:'multiplayer',status:'waiting',players:[],potSize:0,houseFee:0,currentPlayerIndex:0,createdAt:Date.now(),maxPlayers:8,entryFee:this.entryFee};this.games.set(gameId,gameData);}else{gameData=this.games.get(gameId);}// Check if player already in game\nconst existingPlayer=gameData.players.find(p=>p.address===playerAddress);if(existingPlayer){throw new Error('Already in this game');}// Add player to game\nconst player={address:playerAddress,nickname:`Player${gameData.players.length+1}`,streak:0,maxStreak:0,status:'waiting',joinedAt:Date.now(),hasPaid:true// Mock payment\n};gameData.players.push(player);gameData.potSize+=this.entryFee;// Start game if we have 2+ players\nif(gameData.players.length>=2&&gameData.status==='waiting'){gameData.status='active';gameData.startedAt=Date.now();gameData.players[0].status='playing';}this.games.set(gameId,gameData);return{gameId,players:gameData.players,potSize:gameData.potSize,houseFee:Math.round(gameData.potSize*this.houseFee*100)/100,currentPlayer:(_gameData$players$gam=gameData.players[gameData.currentPlayerIndex])===null||_gameData$players$gam===void 0?void 0:_gameData$players$gam.address,isPlayerTurn:gameData.currentPlayerIndex===gameData.players.length-1,gameStatus:gameData.status};}// Start solo game\nasync startSoloGame(playerAddress,betAmount){console.log('🎲 Starting solo game:',playerAddress,'bet:',betAmount);await this.simulateDelay(300);if(!playerAddress){throw new Error('Wallet not connected');}if(betAmount<1||betAmount>100){throw new Error('Bet amount must be between 1 and 100 PUMP tokens');}// Check house balance - max streak of 7 for safety\nconst maxPayout=betAmount*Math.pow(2,7);if(this.mockHouseBalance<maxPayout){throw new Error(`House insufficient funds for this bet (max payout: ${maxPayout} PUMP)`);}const gameId=uuidv4();const gameData={gameId,type:'solo',status:'active',playerAddress,betAmount,currentStreak:0,maxStreak:0,createdAt:Date.now(),houseBalance:this.mockHouseBalance};this.games.set(gameId,gameData);return{gameId,betAmount,currentStreak:0,maxStreak:0,potentialPayout:betAmount*2,houseBalance:this.mockHouseBalance,isPlayerTurn:true,gameStatus:'active'};}// Flip coin\nasync flipCoin(gameId,playerAddress){console.log('🪙 Flipping coin:',gameId,playerAddress);await this.simulateDelay(1000);// Simulate coin flip animation time\nconst gameData=this.games.get(gameId);if(!gameData){throw new Error('Game not found');}const outcome=this.generateCoinFlip(gameId,playerAddress);console.log('Flip result:',outcome);if(gameData.type==='solo'){return this.handleSoloFlip(gameData,outcome);}else{return this.handleMultiplayerFlip(gameData,playerAddress,outcome);}}// Handle solo mode flip\nhandleSoloFlip(gameData,outcome){if(outcome==='heads'){gameData.currentStreak+=1;gameData.maxStreak=Math.max(gameData.maxStreak,gameData.currentStreak);const potentialPayout=gameData.betAmount*Math.pow(2,gameData.currentStreak);return{outcome:'heads',streak:gameData.currentStreak,maxStreak:gameData.maxStreak,potentialPayout,isPlayerTurn:true,status:'active'};}else{// Bust\ngameData.status='finished';gameData.currentStreak=0;gameData.finishedAt=Date.now();// House wins the bet\nthis.mockHouseBalance+=gameData.betAmount;return{outcome:'tails',streak:0,maxStreak:gameData.maxStreak,potentialPayout:0,isPlayerTurn:false,status:'busted'};}}// Handle multiplayer flip\nhandleMultiplayerFlip(gameData,playerAddress,outcome){const playerIndex=gameData.players.findIndex(p=>p.address===playerAddress);if(playerIndex===-1){throw new Error('Player not in game');}const player=gameData.players[playerIndex];if(gameData.currentPlayerIndex!==playerIndex){throw new Error('Not your turn');}if(outcome==='heads'){player.streak+=1;player.maxStreak=Math.max(player.maxStreak,player.streak);return{outcome:'heads',streak:player.streak,maxStreak:player.maxStreak,isPlayerTurn:true,status:'active'};}else{// Bust - move to next player\nplayer.status='busted';player.streak=0;// Find next active player\nconst nextPlayerIndex=this.findNextActivePlayer(gameData);if(nextPlayerIndex===-1){// Game over - determine winner\nthis.endMultiplayerGame(gameData);}else{gameData.currentPlayerIndex=nextPlayerIndex;gameData.players[nextPlayerIndex].status='playing';}return{outcome:'tails',streak:0,maxStreak:player.maxStreak,isPlayerTurn:false,status:player.status};}}// Cash out\nasync cashOut(gameId,playerAddress){console.log('💰 Cashing out:',gameId,playerAddress);await this.simulateDelay(500);const gameData=this.games.get(gameId);if(!gameData){throw new Error('Game not found');}if(gameData.type==='solo'){gameData.status='cashed_out';gameData.finalStreak=gameData.currentStreak;gameData.finishedAt=Date.now();const payout=gameData.betAmount*Math.pow(2,gameData.currentStreak);this.mockHouseBalance-=payout;return{streak:gameData.currentStreak,payout,status:'cashed_out'};}else{const playerIndex=gameData.players.findIndex(p=>p.address===playerAddress);const player=gameData.players[playerIndex];player.status='cashed_out';player.finalStreak=player.streak;// Move to next player\nconst nextPlayerIndex=this.findNextActivePlayer(gameData);if(nextPlayerIndex===-1){this.endMultiplayerGame(gameData);}else{gameData.currentPlayerIndex=nextPlayerIndex;gameData.players[nextPlayerIndex].status='playing';}return{streak:player.streak,status:'cashed_out'};}}// Claim winnings\nasync claimWinnings(gameId,playerAddress){console.log('🏆 Claiming winnings:',gameId,playerAddress);await this.simulateDelay(1000);const gameData=this.games.get(gameId);if(!gameData){throw new Error('Game not found');}if(gameData.type==='solo'){if(gameData.status!=='cashed_out'){throw new Error('No winnings to claim');}const payout=gameData.betAmount*Math.pow(2,gameData.finalStreak);// Clean up game\nthis.games.delete(gameId);return{amount:payout,type:'solo'};}else{if(gameData.status!=='finished'){throw new Error('Game not finished');}const winner=gameData.players.find(p=>p.address===playerAddress);if(!winner||!winner.isWinner){throw new Error('You are not the winner');}const totalPot=gameData.potSize;const houseFeeAmount=totalPot*this.houseFee;const winnings=totalPot-houseFeeAmount;// Clean up game\nthis.games.delete(gameId);return{amount:winnings,type:'multiplayer',houseFee:houseFeeAmount};}}// Helper methods\nfindActiveMultiplayerGame(){for(const[gameId,gameData]of this.games){if(gameData.type==='multiplayer'&&gameData.status==='waiting'&&gameData.players.length<gameData.maxPlayers){return gameId;}}return null;}findNextActivePlayer(gameData){for(let i=gameData.currentPlayerIndex+1;i<gameData.players.length;i++){if(gameData.players[i].status==='waiting'){return i;}}return-1;}endMultiplayerGame(gameData){gameData.status='finished';gameData.finishedAt=Date.now();// Find winner (highest streak)\nlet winner=null;let highestStreak=-1;for(const player of gameData.players){var _player$finalStreak;const finalStreak=(_player$finalStreak=player.finalStreak)!==null&&_player$finalStreak!==void 0?_player$finalStreak:player.maxStreak;if(finalStreak>highestStreak){highestStreak=finalStreak;winner=player;}}if(winner){winner.isWinner=true;gameData.winner=winner.address;}}simulateDelay(ms){return new Promise(resolve=>setTimeout(resolve,ms));}// Get game state\ngetGameState(gameId){return this.games.get(gameId);}// Get payout table for solo mode\ngetPayoutTable(){let betAmount=arguments.length>0&&arguments[0]!==undefined?arguments[0]:1;const payouts=[];for(let streak=1;streak<=10;streak++){payouts.push({streak,payout:betAmount*Math.pow(2,streak),odds:`1 in ${Math.pow(2,streak)}`});}return payouts;}// Get game statistics\ngetGameStats(){return{activeGames:this.games.size,houseBalance:this.mockHouseBalance,totalPlayers:this.players.size};}}","map":{"version":3,"names":["CryptoJS","v4","uuidv4","GameService","constructor","games","Map","players","houseWallet","entryFee","houseFee","initialized","initialize","console","log","mockHouseBalance","generateCoinFlip","gameId","playerAddress","seed","Date","now","toString","hash","SHA256","randomValue","parseInt","substring","joinMultiplayerGame","_gameData$players$gam","simulateDelay","Error","findActiveMultiplayerGame","gameData","type","status","potSize","currentPlayerIndex","createdAt","maxPlayers","set","get","existingPlayer","find","p","address","player","nickname","length","streak","maxStreak","joinedAt","hasPaid","push","startedAt","Math","round","currentPlayer","isPlayerTurn","gameStatus","startSoloGame","betAmount","maxPayout","pow","currentStreak","houseBalance","potentialPayout","flipCoin","outcome","handleSoloFlip","handleMultiplayerFlip","max","finishedAt","playerIndex","findIndex","nextPlayerIndex","findNextActivePlayer","endMultiplayerGame","cashOut","finalStreak","payout","claimWinnings","delete","amount","winner","isWinner","totalPot","houseFeeAmount","winnings","i","highestStreak","_player$finalStreak","ms","Promise","resolve","setTimeout","getGameState","getPayoutTable","arguments","undefined","payouts","odds","getGameStats","activeGames","size","totalPlayers"],"sources":["C:/dev.fun/src/services/GameService.js"],"sourcesContent":["import CryptoJS from 'crypto-js';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nexport class GameService {\r\n  constructor() {\r\n    this.games = new Map();\r\n    this.players = new Map();\r\n    this.houseWallet = 'HOUSE_WALLET_MOCK';\r\n    this.entryFee = 5; // PUMP tokens\r\n    this.houseFee = 0.05; // 5%\r\n    this.initialized = false;\r\n  }\r\n\r\n  initialize() {\r\n    if (this.initialized) return;\r\n    \r\n    console.log('🎲 GameService initialized');\r\n    this.initialized = true;\r\n    \r\n    // Mock some initial data - increase house balance to handle larger bets\r\n    this.mockHouseBalance = 1000000; // 1 million PUMP tokens\r\n  }\r\n\r\n  // Generate pseudo-random coin flip using current timestamp and player address\r\n  generateCoinFlip(gameId, playerAddress) {\r\n    const seed = Date.now().toString() + gameId + playerAddress;\r\n    const hash = CryptoJS.SHA256(seed).toString();\r\n    const randomValue = parseInt(hash.substring(0, 8), 16);\r\n    return (randomValue % 2) === 0 ? 'heads' : 'tails';\r\n  }\r\n\r\n  // Join multiplayer game\r\n  async joinMultiplayerGame(playerAddress) {\r\n    console.log('🎮 Joining multiplayer game:', playerAddress);\r\n    \r\n    // Simulate wallet balance check\r\n    await this.simulateDelay(500);\r\n    \r\n    if (!playerAddress) {\r\n      throw new Error('Wallet not connected');\r\n    }\r\n\r\n    // Find existing game or create new one\r\n    let gameId = this.findActiveMultiplayerGame();\r\n    let gameData;\r\n\r\n    if (!gameId) {\r\n      // Create new game\r\n      gameId = uuidv4();\r\n      gameData = {\r\n        gameId,\r\n        type: 'multiplayer',\r\n        status: 'waiting',\r\n        players: [],\r\n        potSize: 0,\r\n        houseFee: 0,\r\n        currentPlayerIndex: 0,\r\n        createdAt: Date.now(),\r\n        maxPlayers: 8,\r\n        entryFee: this.entryFee\r\n      };\r\n      this.games.set(gameId, gameData);\r\n    } else {\r\n      gameData = this.games.get(gameId);\r\n    }\r\n\r\n    // Check if player already in game\r\n    const existingPlayer = gameData.players.find(p => p.address === playerAddress);\r\n    if (existingPlayer) {\r\n      throw new Error('Already in this game');\r\n    }\r\n\r\n    // Add player to game\r\n    const player = {\r\n      address: playerAddress,\r\n      nickname: `Player${gameData.players.length + 1}`,\r\n      streak: 0,\r\n      maxStreak: 0,\r\n      status: 'waiting',\r\n      joinedAt: Date.now(),\r\n      hasPaid: true // Mock payment\r\n    };\r\n\r\n    gameData.players.push(player);\r\n    gameData.potSize += this.entryFee;\r\n\r\n    // Start game if we have 2+ players\r\n    if (gameData.players.length >= 2 && gameData.status === 'waiting') {\r\n      gameData.status = 'active';\r\n      gameData.startedAt = Date.now();\r\n      gameData.players[0].status = 'playing';\r\n    }\r\n\r\n    this.games.set(gameId, gameData);\r\n\r\n    return {\r\n      gameId,\r\n      players: gameData.players,\r\n      potSize: gameData.potSize,\r\n      houseFee: Math.round(gameData.potSize * this.houseFee * 100) / 100,\r\n      currentPlayer: gameData.players[gameData.currentPlayerIndex]?.address,\r\n      isPlayerTurn: gameData.currentPlayerIndex === gameData.players.length - 1,\r\n      gameStatus: gameData.status\r\n    };\r\n  }\r\n\r\n  // Start solo game\r\n  async startSoloGame(playerAddress, betAmount) {\r\n    console.log('🎲 Starting solo game:', playerAddress, 'bet:', betAmount);\r\n    \r\n    await this.simulateDelay(300);\r\n    \r\n    if (!playerAddress) {\r\n      throw new Error('Wallet not connected');\r\n    }\r\n\r\n    if (betAmount < 1 || betAmount > 100) {\r\n      throw new Error('Bet amount must be between 1 and 100 PUMP tokens');\r\n    }\r\n\r\n    // Check house balance - max streak of 7 for safety\r\n    const maxPayout = betAmount * Math.pow(2, 7);\r\n    if (this.mockHouseBalance < maxPayout) {\r\n      throw new Error(`House insufficient funds for this bet (max payout: ${maxPayout} PUMP)`);\r\n    }\r\n\r\n    const gameId = uuidv4();\r\n    const gameData = {\r\n      gameId,\r\n      type: 'solo',\r\n      status: 'active',\r\n      playerAddress,\r\n      betAmount,\r\n      currentStreak: 0,\r\n      maxStreak: 0,\r\n      createdAt: Date.now(),\r\n      houseBalance: this.mockHouseBalance\r\n    };\r\n\r\n    this.games.set(gameId, gameData);\r\n\r\n    return {\r\n      gameId,\r\n      betAmount,\r\n      currentStreak: 0,\r\n      maxStreak: 0,\r\n      potentialPayout: betAmount * 2,\r\n      houseBalance: this.mockHouseBalance,\r\n      isPlayerTurn: true,\r\n      gameStatus: 'active'\r\n    };\r\n  }\r\n\r\n  // Flip coin\r\n  async flipCoin(gameId, playerAddress) {\r\n    console.log('🪙 Flipping coin:', gameId, playerAddress);\r\n    \r\n    await this.simulateDelay(1000); // Simulate coin flip animation time\r\n    \r\n    const gameData = this.games.get(gameId);\r\n    if (!gameData) {\r\n      throw new Error('Game not found');\r\n    }\r\n\r\n    const outcome = this.generateCoinFlip(gameId, playerAddress);\r\n    console.log('Flip result:', outcome);\r\n\r\n    if (gameData.type === 'solo') {\r\n      return this.handleSoloFlip(gameData, outcome);\r\n    } else {\r\n      return this.handleMultiplayerFlip(gameData, playerAddress, outcome);\r\n    }\r\n  }\r\n\r\n  // Handle solo mode flip\r\n  handleSoloFlip(gameData, outcome) {\r\n    if (outcome === 'heads') {\r\n      gameData.currentStreak += 1;\r\n      gameData.maxStreak = Math.max(gameData.maxStreak, gameData.currentStreak);\r\n      \r\n      const potentialPayout = gameData.betAmount * Math.pow(2, gameData.currentStreak);\r\n      \r\n      return {\r\n        outcome: 'heads',\r\n        streak: gameData.currentStreak,\r\n        maxStreak: gameData.maxStreak,\r\n        potentialPayout,\r\n        isPlayerTurn: true,\r\n        status: 'active'\r\n      };\r\n    } else {\r\n      // Bust\r\n      gameData.status = 'finished';\r\n      gameData.currentStreak = 0;\r\n      gameData.finishedAt = Date.now();\r\n      \r\n      // House wins the bet\r\n      this.mockHouseBalance += gameData.betAmount;\r\n      \r\n      return {\r\n        outcome: 'tails',\r\n        streak: 0,\r\n        maxStreak: gameData.maxStreak,\r\n        potentialPayout: 0,\r\n        isPlayerTurn: false,\r\n        status: 'busted'\r\n      };\r\n    }\r\n  }\r\n\r\n  // Handle multiplayer flip\r\n  handleMultiplayerFlip(gameData, playerAddress, outcome) {\r\n    const playerIndex = gameData.players.findIndex(p => p.address === playerAddress);\r\n    if (playerIndex === -1) {\r\n      throw new Error('Player not in game');\r\n    }\r\n\r\n    const player = gameData.players[playerIndex];\r\n    \r\n    if (gameData.currentPlayerIndex !== playerIndex) {\r\n      throw new Error('Not your turn');\r\n    }\r\n\r\n    if (outcome === 'heads') {\r\n      player.streak += 1;\r\n      player.maxStreak = Math.max(player.maxStreak, player.streak);\r\n      \r\n      return {\r\n        outcome: 'heads',\r\n        streak: player.streak,\r\n        maxStreak: player.maxStreak,\r\n        isPlayerTurn: true,\r\n        status: 'active'\r\n      };\r\n    } else {\r\n      // Bust - move to next player\r\n      player.status = 'busted';\r\n      player.streak = 0;\r\n      \r\n      // Find next active player\r\n      const nextPlayerIndex = this.findNextActivePlayer(gameData);\r\n      if (nextPlayerIndex === -1) {\r\n        // Game over - determine winner\r\n        this.endMultiplayerGame(gameData);\r\n      } else {\r\n        gameData.currentPlayerIndex = nextPlayerIndex;\r\n        gameData.players[nextPlayerIndex].status = 'playing';\r\n      }\r\n      \r\n      return {\r\n        outcome: 'tails',\r\n        streak: 0,\r\n        maxStreak: player.maxStreak,\r\n        isPlayerTurn: false,\r\n        status: player.status\r\n      };\r\n    }\r\n  }\r\n\r\n  // Cash out\r\n  async cashOut(gameId, playerAddress) {\r\n    console.log('💰 Cashing out:', gameId, playerAddress);\r\n    \r\n    await this.simulateDelay(500);\r\n    \r\n    const gameData = this.games.get(gameId);\r\n    if (!gameData) {\r\n      throw new Error('Game not found');\r\n    }\r\n\r\n    if (gameData.type === 'solo') {\r\n      gameData.status = 'cashed_out';\r\n      gameData.finalStreak = gameData.currentStreak;\r\n      gameData.finishedAt = Date.now();\r\n      \r\n      const payout = gameData.betAmount * Math.pow(2, gameData.currentStreak);\r\n      this.mockHouseBalance -= payout;\r\n      \r\n      return {\r\n        streak: gameData.currentStreak,\r\n        payout,\r\n        status: 'cashed_out'\r\n      };\r\n    } else {\r\n      const playerIndex = gameData.players.findIndex(p => p.address === playerAddress);\r\n      const player = gameData.players[playerIndex];\r\n      \r\n      player.status = 'cashed_out';\r\n      player.finalStreak = player.streak;\r\n      \r\n      // Move to next player\r\n      const nextPlayerIndex = this.findNextActivePlayer(gameData);\r\n      if (nextPlayerIndex === -1) {\r\n        this.endMultiplayerGame(gameData);\r\n      } else {\r\n        gameData.currentPlayerIndex = nextPlayerIndex;\r\n        gameData.players[nextPlayerIndex].status = 'playing';\r\n      }\r\n      \r\n      return {\r\n        streak: player.streak,\r\n        status: 'cashed_out'\r\n      };\r\n    }\r\n  }\r\n\r\n  // Claim winnings\r\n  async claimWinnings(gameId, playerAddress) {\r\n    console.log('🏆 Claiming winnings:', gameId, playerAddress);\r\n    \r\n    await this.simulateDelay(1000);\r\n    \r\n    const gameData = this.games.get(gameId);\r\n    if (!gameData) {\r\n      throw new Error('Game not found');\r\n    }\r\n\r\n    if (gameData.type === 'solo') {\r\n      if (gameData.status !== 'cashed_out') {\r\n        throw new Error('No winnings to claim');\r\n      }\r\n      \r\n      const payout = gameData.betAmount * Math.pow(2, gameData.finalStreak);\r\n      \r\n      // Clean up game\r\n      this.games.delete(gameId);\r\n      \r\n      return {\r\n        amount: payout,\r\n        type: 'solo'\r\n      };\r\n    } else {\r\n      if (gameData.status !== 'finished') {\r\n        throw new Error('Game not finished');\r\n      }\r\n      \r\n      const winner = gameData.players.find(p => p.address === playerAddress);\r\n      if (!winner || !winner.isWinner) {\r\n        throw new Error('You are not the winner');\r\n      }\r\n      \r\n      const totalPot = gameData.potSize;\r\n      const houseFeeAmount = totalPot * this.houseFee;\r\n      const winnings = totalPot - houseFeeAmount;\r\n      \r\n      // Clean up game\r\n      this.games.delete(gameId);\r\n      \r\n      return {\r\n        amount: winnings,\r\n        type: 'multiplayer',\r\n        houseFee: houseFeeAmount\r\n      };\r\n    }\r\n  }\r\n\r\n  // Helper methods\r\n  findActiveMultiplayerGame() {\r\n    for (const [gameId, gameData] of this.games) {\r\n      if (gameData.type === 'multiplayer' && \r\n          gameData.status === 'waiting' && \r\n          gameData.players.length < gameData.maxPlayers) {\r\n        return gameId;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  findNextActivePlayer(gameData) {\r\n    for (let i = gameData.currentPlayerIndex + 1; i < gameData.players.length; i++) {\r\n      if (gameData.players[i].status === 'waiting') {\r\n        return i;\r\n      }\r\n    }\r\n    return -1;\r\n  }\r\n\r\n  endMultiplayerGame(gameData) {\r\n    gameData.status = 'finished';\r\n    gameData.finishedAt = Date.now();\r\n    \r\n    // Find winner (highest streak)\r\n    let winner = null;\r\n    let highestStreak = -1;\r\n    \r\n    for (const player of gameData.players) {\r\n      const finalStreak = player.finalStreak ?? player.maxStreak;\r\n      if (finalStreak > highestStreak) {\r\n        highestStreak = finalStreak;\r\n        winner = player;\r\n      }\r\n    }\r\n    \r\n    if (winner) {\r\n      winner.isWinner = true;\r\n      gameData.winner = winner.address;\r\n    }\r\n  }\r\n\r\n  simulateDelay(ms) {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n  }\r\n\r\n  // Get game state\r\n  getGameState(gameId) {\r\n    return this.games.get(gameId);\r\n  }\r\n\r\n  // Get payout table for solo mode\r\n  getPayoutTable(betAmount = 1) {\r\n    const payouts = [];\r\n    for (let streak = 1; streak <= 10; streak++) {\r\n      payouts.push({\r\n        streak,\r\n        payout: betAmount * Math.pow(2, streak),\r\n        odds: `1 in ${Math.pow(2, streak)}`\r\n      });\r\n    }\r\n    return payouts;\r\n  }\r\n\r\n  // Get game statistics\r\n  getGameStats() {\r\n    return {\r\n      activeGames: this.games.size,\r\n      houseBalance: this.mockHouseBalance,\r\n      totalPlayers: this.players.size\r\n    };\r\n  }\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}