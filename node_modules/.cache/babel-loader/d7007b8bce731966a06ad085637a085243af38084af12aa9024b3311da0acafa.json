{"ast":null,"code":"import { Connection, PublicKey, clusterApiUrl } from '@solana/web3.js';\nexport class WalletService {\n  constructor() {\n    this.connection = new Connection(clusterApiUrl('mainnet-beta'));\n    this.connectedWallet = null;\n    this.initialized = false;\n  }\n  initialize() {\n    if (this.initialized) return;\n    console.log('üí≥ WalletService initialized');\n    this.initialized = true;\n  }\n\n  // Connect to Phantom wallet\n  async connect() {\n    if (!window.solana || !window.solana.isPhantom) {\n      throw new Error('Phantom wallet is not installed');\n    }\n    try {\n      const resp = await window.solana.connect();\n      const address = resp.publicKey.toString();\n      const balanceLamports = await this.connection.getBalance(new PublicKey(address));\n      const balance = balanceLamports / 1e9; // Convert lamports to SOL\n      // TODO: Fetch SPL token balance if needed\n      this.connectedWallet = {\n        connected: true,\n        address,\n        balance,\n        tokenBalance: 0,\n        // TODO: fetch real token balance\n        nickname: null\n      };\n      console.log('‚úÖ Wallet connected:', this.connectedWallet);\n      return this.connectedWallet;\n    } catch (err) {\n      throw new Error('User rejected wallet connection or Phantom not available');\n    }\n  }\n\n  // Disconnect wallet (just clear state)\n  async disconnect() {\n    if (window.solana && window.solana.isPhantom) {\n      try {\n        await window.solana.disconnect();\n      } catch (e) {}\n    }\n    this.connectedWallet = null;\n    console.log('‚ùå Wallet disconnected');\n  }\n\n  // Get current wallet info\n  getWalletInfo() {\n    return this.connectedWallet;\n  }\n\n  // Update balance (SOL and token)\n  async updateBalance(address) {\n    if (!address) {\n      throw new Error('Wallet not connected');\n    }\n    const balanceLamports = await this.connection.getBalance(new PublicKey(address));\n    const balance = balanceLamports / 1e9;\n    this.connectedWallet.balance = balance;\n    // this.connectedWallet.tokenBalance = ...\n    return {\n      balance: this.connectedWallet.balance,\n      tokenBalance: this.connectedWallet.tokenBalance\n    };\n  }\n\n  // Utility: is wallet connected?\n  isConnected() {\n    return this.connectedWallet !== null;\n  }\n\n  // Utility: get connected address\n  getConnectedAddress() {\n    var _this$connectedWallet;\n    return ((_this$connectedWallet = this.connectedWallet) === null || _this$connectedWallet === void 0 ? void 0 : _this$connectedWallet.address) || null;\n  }\n\n  // Utility: format address for display\n  formatAddress(address) {\n    if (!address) return '';\n    if (address.length <= 8) return address;\n    return `${address.substring(0, 4)}...${address.substring(address.length - 4)}`;\n  }\n}","map":{"version":3,"names":["Connection","PublicKey","clusterApiUrl","WalletService","constructor","connection","connectedWallet","initialized","initialize","console","log","connect","window","solana","isPhantom","Error","resp","address","publicKey","toString","balanceLamports","getBalance","balance","connected","tokenBalance","nickname","err","disconnect","e","getWalletInfo","updateBalance","isConnected","getConnectedAddress","_this$connectedWallet","formatAddress","length","substring"],"sources":["C:/dev.fun/src/services/WalletService.js"],"sourcesContent":["import { Connection, PublicKey, clusterApiUrl } from '@solana/web3.js';\r\n\r\nexport class WalletService {\r\n  constructor() {\r\n    this.connection = new Connection(clusterApiUrl('mainnet-beta'));\r\n    this.connectedWallet = null;\r\n    this.initialized = false;\r\n  }\r\n\r\n  initialize() {\r\n    if (this.initialized) return;\r\n    console.log('üí≥ WalletService initialized');\r\n    this.initialized = true;\r\n  }\r\n\r\n  // Connect to Phantom wallet\r\n  async connect() {\r\n    if (!window.solana || !window.solana.isPhantom) {\r\n      throw new Error('Phantom wallet is not installed');\r\n    }\r\n    try {\r\n      const resp = await window.solana.connect();\r\n      const address = resp.publicKey.toString();\r\n      const balanceLamports = await this.connection.getBalance(new PublicKey(address));\r\n      const balance = balanceLamports / 1e9; // Convert lamports to SOL\r\n      // TODO: Fetch SPL token balance if needed\r\n      this.connectedWallet = {\r\n        connected: true,\r\n        address,\r\n        balance,\r\n        tokenBalance: 0, // TODO: fetch real token balance\r\n        nickname: null\r\n      };\r\n      console.log('‚úÖ Wallet connected:', this.connectedWallet);\r\n      return this.connectedWallet;\r\n    } catch (err) {\r\n      throw new Error('User rejected wallet connection or Phantom not available');\r\n    }\r\n  }\r\n\r\n  // Disconnect wallet (just clear state)\r\n  async disconnect() {\r\n    if (window.solana && window.solana.isPhantom) {\r\n      try { await window.solana.disconnect(); } catch (e) {}\r\n    }\r\n    this.connectedWallet = null;\r\n    console.log('‚ùå Wallet disconnected');\r\n  }\r\n\r\n  // Get current wallet info\r\n  getWalletInfo() {\r\n    return this.connectedWallet;\r\n  }\r\n\r\n  // Update balance (SOL and token)\r\n  async updateBalance(address) {\r\n    if (!address) {\r\n      throw new Error('Wallet not connected');\r\n    }\r\n    const balanceLamports = await this.connection.getBalance(new PublicKey(address));\r\n    const balance = balanceLamports / 1e9;\r\n    this.connectedWallet.balance = balance;\r\n    // this.connectedWallet.tokenBalance = ...\r\n    return {\r\n      balance: this.connectedWallet.balance,\r\n      tokenBalance: this.connectedWallet.tokenBalance\r\n    };\r\n  }\r\n\r\n  // Utility: is wallet connected?\r\n  isConnected() {\r\n    return this.connectedWallet !== null;\r\n  }\r\n\r\n  // Utility: get connected address\r\n  getConnectedAddress() {\r\n    return this.connectedWallet?.address || null;\r\n  }\r\n\r\n  // Utility: format address for display\r\n  formatAddress(address) {\r\n    if (!address) return '';\r\n    if (address.length <= 8) return address;\r\n    return `${address.substring(0, 4)}...${address.substring(address.length - 4)}`;\r\n  }\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}