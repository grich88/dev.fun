{"ast":null,"code":"import { ethers } from 'ethers';\nexport class WalletService {\n  constructor() {\n    this.provider = null;\n    this.connectedWallet = null;\n    this.initialized = false;\n  }\n  initialize() {\n    if (this.initialized) return;\n    console.log('üí≥ WalletService initialized');\n    this.initialized = true;\n  }\n\n  // Connect to MetaMask wallet\n  async connect() {\n    if (!window.ethereum) {\n      throw new Error('MetaMask is not installed');\n    }\n    this.provider = new ethers.providers.Web3Provider(window.ethereum);\n    try {\n      await window.ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n      const signer = this.provider.getSigner();\n      const address = await signer.getAddress();\n      const balance = await this.provider.getBalance(address);\n      // TODO: Fetch ERC-20 token balance if needed\n      this.connectedWallet = {\n        connected: true,\n        address,\n        balance: Number(ethers.utils.formatEther(balance)),\n        tokenBalance: 0,\n        // TODO: fetch real token balance\n        nickname: null\n      };\n      console.log('‚úÖ Wallet connected:', this.connectedWallet);\n      return this.connectedWallet;\n    } catch (err) {\n      throw new Error('User rejected wallet connection');\n    }\n  }\n\n  // Disconnect wallet (just clear state)\n  async disconnect() {\n    this.connectedWallet = null;\n    this.provider = null;\n    console.log('‚ùå Wallet disconnected');\n  }\n\n  // Get current wallet info\n  getWalletInfo() {\n    return this.connectedWallet;\n  }\n\n  // Update balance (ETH and token)\n  async updateBalance(address) {\n    if (!this.provider || !address) {\n      throw new Error('Wallet not connected');\n    }\n    const balance = await this.provider.getBalance(address);\n    // TODO: Fetch ERC-20 token balance if needed\n    this.connectedWallet.balance = Number(ethers.utils.formatEther(balance));\n    // this.connectedWallet.tokenBalance = ...\n    return {\n      balance: this.connectedWallet.balance,\n      tokenBalance: this.connectedWallet.tokenBalance\n    };\n  }\n\n  // Utility: is wallet connected?\n  isConnected() {\n    return this.connectedWallet !== null;\n  }\n\n  // Utility: get connected address\n  getConnectedAddress() {\n    var _this$connectedWallet;\n    return ((_this$connectedWallet = this.connectedWallet) === null || _this$connectedWallet === void 0 ? void 0 : _this$connectedWallet.address) || null;\n  }\n\n  // Utility: format address for display\n  formatAddress(address) {\n    if (!address) return '';\n    if (address.length <= 8) return address;\n    return `${address.substring(0, 4)}...${address.substring(address.length - 4)}`;\n  }\n}","map":{"version":3,"names":["ethers","WalletService","constructor","provider","connectedWallet","initialized","initialize","console","log","connect","window","ethereum","Error","providers","Web3Provider","request","method","signer","getSigner","address","getAddress","balance","getBalance","connected","Number","utils","formatEther","tokenBalance","nickname","err","disconnect","getWalletInfo","updateBalance","isConnected","getConnectedAddress","_this$connectedWallet","formatAddress","length","substring"],"sources":["C:/dev.fun/src/services/WalletService.js"],"sourcesContent":["import { ethers } from 'ethers';\r\n\r\nexport class WalletService {\r\n  constructor() {\r\n    this.provider = null;\r\n    this.connectedWallet = null;\r\n    this.initialized = false;\r\n  }\r\n\r\n  initialize() {\r\n    if (this.initialized) return;\r\n    console.log('üí≥ WalletService initialized');\r\n    this.initialized = true;\r\n  }\r\n\r\n  // Connect to MetaMask wallet\r\n  async connect() {\r\n    if (!window.ethereum) {\r\n      throw new Error('MetaMask is not installed');\r\n    }\r\n    this.provider = new ethers.providers.Web3Provider(window.ethereum);\r\n    try {\r\n      await window.ethereum.request({ method: 'eth_requestAccounts' });\r\n      const signer = this.provider.getSigner();\r\n      const address = await signer.getAddress();\r\n      const balance = await this.provider.getBalance(address);\r\n      // TODO: Fetch ERC-20 token balance if needed\r\n      this.connectedWallet = {\r\n        connected: true,\r\n        address,\r\n        balance: Number(ethers.utils.formatEther(balance)),\r\n        tokenBalance: 0, // TODO: fetch real token balance\r\n        nickname: null\r\n      };\r\n      console.log('‚úÖ Wallet connected:', this.connectedWallet);\r\n      return this.connectedWallet;\r\n    } catch (err) {\r\n      throw new Error('User rejected wallet connection');\r\n    }\r\n  }\r\n\r\n  // Disconnect wallet (just clear state)\r\n  async disconnect() {\r\n    this.connectedWallet = null;\r\n    this.provider = null;\r\n    console.log('‚ùå Wallet disconnected');\r\n  }\r\n\r\n  // Get current wallet info\r\n  getWalletInfo() {\r\n    return this.connectedWallet;\r\n  }\r\n\r\n  // Update balance (ETH and token)\r\n  async updateBalance(address) {\r\n    if (!this.provider || !address) {\r\n      throw new Error('Wallet not connected');\r\n    }\r\n    const balance = await this.provider.getBalance(address);\r\n    // TODO: Fetch ERC-20 token balance if needed\r\n    this.connectedWallet.balance = Number(ethers.utils.formatEther(balance));\r\n    // this.connectedWallet.tokenBalance = ...\r\n    return {\r\n      balance: this.connectedWallet.balance,\r\n      tokenBalance: this.connectedWallet.tokenBalance\r\n    };\r\n  }\r\n\r\n  // Utility: is wallet connected?\r\n  isConnected() {\r\n    return this.connectedWallet !== null;\r\n  }\r\n\r\n  // Utility: get connected address\r\n  getConnectedAddress() {\r\n    return this.connectedWallet?.address || null;\r\n  }\r\n\r\n  // Utility: format address for display\r\n  formatAddress(address) {\r\n    if (!address) return '';\r\n    if (address.length <= 8) return address;\r\n    return `${address.substring(0, 4)}...${address.substring(address.length - 4)}`;\r\n  }\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}