{"ast":null,"code":"/**\n * Short Weierstrass curve methods. The formula is: y² = x³ + ax + b.\n *\n * ### Design rationale for types\n *\n * * Interaction between classes from different curves should fail:\n *   `k256.Point.BASE.add(p256.Point.BASE)`\n * * For this purpose we want to use `instanceof` operator, which is fast and works during runtime\n * * Different calls of `curve()` would return different classes -\n *   `curve(params) !== curve(params)`: if somebody decided to monkey-patch their curve,\n *   it won't affect others\n *\n * TypeScript can't infer types for classes created inside a function. Classes is one instance\n * of nominative types in TypeScript and interfaces only check for shape, so it's hard to create\n * unique type for every function call.\n *\n * We can use generic types via some param, like curve opts, but that would:\n *     1. Enable interaction between `curve(params)` and `curve(params)` (curves of same params)\n *     which is hard to debug.\n *     2. Params can be generic and we can't enforce them to be constant value:\n *     if somebody creates curve from non-constant params,\n *     it would be allowed to interact with other curves with non-constant params\n *\n * @todo https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-7.html#unique-symbol\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { hmac } from '@noble/hashes/hmac.js';\nimport { ahash } from '@noble/hashes/utils';\nimport { _validateObject, abool, abytes, aInRange, bitLen, bitMask, bytesToHex, bytesToNumberBE, concatBytes, createHmacDrbg, ensureBytes, hexToBytes, inRange, isBytes, memoized, numberToHexUnpadded, randomBytes } from \"../utils.js\";\nimport { _createCurveFields, mulEndoUnsafe, negateCt, normalizeZ, pippenger, wNAF } from \"./curve.js\";\nimport { Field, FpInvertBatch, getMinHashLength, mapHashToField, validateField } from \"./modular.js\";\n// We construct basis in such way that den is always positive and equals n, but num sign depends on basis (not on secret value)\nconst divNearest = (num, den) => (num + (num >= 0 ? den : -den) / _2n) / den;\n/**\n * Splits scalar for GLV endomorphism.\n */\nexport function _splitEndoScalar(k, basis, n) {\n  // Split scalar into two such that part is ~half bits: `abs(part) < sqrt(N)`\n  // Since part can be negative, we need to do this on point.\n  // TODO: verifyScalar function which consumes lambda\n  const [[a1, b1], [a2, b2]] = basis;\n  const c1 = divNearest(b2 * k, n);\n  const c2 = divNearest(-b1 * k, n);\n  // |k1|/|k2| is < sqrt(N), but can be negative.\n  // If we do `k1 mod N`, we'll get big scalar (`> sqrt(N)`): so, we do cheaper negation instead.\n  let k1 = k - c1 * a1 - c2 * a2;\n  let k2 = -c1 * b1 - c2 * b2;\n  const k1neg = k1 < _0n;\n  const k2neg = k2 < _0n;\n  if (k1neg) k1 = -k1;\n  if (k2neg) k2 = -k2;\n  // Double check that resulting scalar less than half bits of N: otherwise wNAF will fail.\n  // This should only happen on wrong basises. Also, math inside is too complex and I don't trust it.\n  const MAX_NUM = bitMask(Math.ceil(bitLen(n) / 2)) + _1n; // Half bits of N\n  if (k1 < _0n || k1 >= MAX_NUM || k2 < _0n || k2 >= MAX_NUM) {\n    throw new Error('splitScalar (endomorphism): failed, k=' + k);\n  }\n  return {\n    k1neg,\n    k1,\n    k2neg,\n    k2\n  };\n}\nfunction validateSigVerOpts(opts) {\n  if (opts.lowS !== undefined) abool('lowS', opts.lowS);\n  if (opts.prehash !== undefined) abool('prehash', opts.prehash);\n}\nexport class DERErr extends Error {\n  constructor() {\n    let m = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    super(m);\n  }\n}\n/**\n * ASN.1 DER encoding utilities. ASN is very complex & fragile. Format:\n *\n *     [0x30 (SEQUENCE), bytelength, 0x02 (INTEGER), intLength, R, 0x02 (INTEGER), intLength, S]\n *\n * Docs: https://letsencrypt.org/docs/a-warm-welcome-to-asn1-and-der/, https://luca.ntop.org/Teaching/Appunti/asn1.html\n */\nexport const DER = {\n  // asn.1 DER encoding utils\n  Err: DERErr,\n  // Basic building block is TLV (Tag-Length-Value)\n  _tlv: {\n    encode: (tag, data) => {\n      const {\n        Err: E\n      } = DER;\n      if (tag < 0 || tag > 256) throw new E('tlv.encode: wrong tag');\n      if (data.length & 1) throw new E('tlv.encode: unpadded data');\n      const dataLen = data.length / 2;\n      const len = numberToHexUnpadded(dataLen);\n      if (len.length / 2 & 128) throw new E('tlv.encode: long form length too big');\n      // length of length with long form flag\n      const lenLen = dataLen > 127 ? numberToHexUnpadded(len.length / 2 | 128) : '';\n      const t = numberToHexUnpadded(tag);\n      return t + lenLen + len + data;\n    },\n    // v - value, l - left bytes (unparsed)\n    decode(tag, data) {\n      const {\n        Err: E\n      } = DER;\n      let pos = 0;\n      if (tag < 0 || tag > 256) throw new E('tlv.encode: wrong tag');\n      if (data.length < 2 || data[pos++] !== tag) throw new E('tlv.decode: wrong tlv');\n      const first = data[pos++];\n      const isLong = !!(first & 128); // First bit of first length byte is flag for short/long form\n      let length = 0;\n      if (!isLong) length = first;else {\n        // Long form: [longFlag(1bit), lengthLength(7bit), length (BE)]\n        const lenLen = first & 127;\n        if (!lenLen) throw new E('tlv.decode(long): indefinite length not supported');\n        if (lenLen > 4) throw new E('tlv.decode(long): byte length is too big'); // this will overflow u32 in js\n        const lengthBytes = data.subarray(pos, pos + lenLen);\n        if (lengthBytes.length !== lenLen) throw new E('tlv.decode: length bytes not complete');\n        if (lengthBytes[0] === 0) throw new E('tlv.decode(long): zero leftmost byte');\n        for (const b of lengthBytes) length = length << 8 | b;\n        pos += lenLen;\n        if (length < 128) throw new E('tlv.decode(long): not minimal encoding');\n      }\n      const v = data.subarray(pos, pos + length);\n      if (v.length !== length) throw new E('tlv.decode: wrong value length');\n      return {\n        v,\n        l: data.subarray(pos + length)\n      };\n    }\n  },\n  // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n  // since we always use positive integers here. It must always be empty:\n  // - add zero byte if exists\n  // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n  _int: {\n    encode(num) {\n      const {\n        Err: E\n      } = DER;\n      if (num < _0n) throw new E('integer: negative integers are not allowed');\n      let hex = numberToHexUnpadded(num);\n      // Pad with zero byte if negative flag is present\n      if (Number.parseInt(hex[0], 16) & 0b1000) hex = '00' + hex;\n      if (hex.length & 1) throw new E('unexpected DER parsing assertion: unpadded hex');\n      return hex;\n    },\n    decode(data) {\n      const {\n        Err: E\n      } = DER;\n      if (data[0] & 128) throw new E('invalid signature integer: negative');\n      if (data[0] === 0x00 && !(data[1] & 128)) throw new E('invalid signature integer: unnecessary leading zero');\n      return bytesToNumberBE(data);\n    }\n  },\n  toSig(hex) {\n    // parse DER signature\n    const {\n      Err: E,\n      _int: int,\n      _tlv: tlv\n    } = DER;\n    const data = ensureBytes('signature', hex);\n    const {\n      v: seqBytes,\n      l: seqLeftBytes\n    } = tlv.decode(0x30, data);\n    if (seqLeftBytes.length) throw new E('invalid signature: left bytes after parsing');\n    const {\n      v: rBytes,\n      l: rLeftBytes\n    } = tlv.decode(0x02, seqBytes);\n    const {\n      v: sBytes,\n      l: sLeftBytes\n    } = tlv.decode(0x02, rLeftBytes);\n    if (sLeftBytes.length) throw new E('invalid signature: left bytes after parsing');\n    return {\n      r: int.decode(rBytes),\n      s: int.decode(sBytes)\n    };\n  },\n  hexFromSig(sig) {\n    const {\n      _tlv: tlv,\n      _int: int\n    } = DER;\n    const rs = tlv.encode(0x02, int.encode(sig.r));\n    const ss = tlv.encode(0x02, int.encode(sig.s));\n    const seq = rs + ss;\n    return tlv.encode(0x30, seq);\n  }\n};\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0),\n  _1n = BigInt(1),\n  _2n = BigInt(2),\n  _3n = BigInt(3),\n  _4n = BigInt(4);\n// TODO: remove\nexport function _legacyHelperEquat(Fp, a, b) {\n  /**\n   * y² = x³ + ax + b: Short weierstrass curve formula. Takes x, returns y².\n   * @returns y²\n   */\n  function weierstrassEquation(x) {\n    const x2 = Fp.sqr(x); // x * x\n    const x3 = Fp.mul(x2, x); // x² * x\n    return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x³ + a * x + b\n  }\n  return weierstrassEquation;\n}\nexport function _normFnElement(Fn, key) {\n  const {\n    BYTES: expected\n  } = Fn;\n  let num;\n  if (typeof key === 'bigint') {\n    num = key;\n  } else {\n    let bytes = ensureBytes('private key', key);\n    try {\n      num = Fn.fromBytes(bytes);\n    } catch (error) {\n      throw new Error(`invalid private key: expected ui8a of size ${expected}, got ${typeof key}`);\n    }\n  }\n  if (!Fn.isValidNot0(num)) throw new Error('invalid private key: out of range [1..N-1]');\n  return num;\n}\nexport function weierstrassN(CURVE) {\n  let curveOpts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const {\n    Fp,\n    Fn\n  } = _createCurveFields('weierstrass', CURVE, curveOpts);\n  const {\n    h: cofactor,\n    n: CURVE_ORDER\n  } = CURVE;\n  _validateObject(curveOpts, {}, {\n    allowInfinityPoint: 'boolean',\n    clearCofactor: 'function',\n    isTorsionFree: 'function',\n    fromBytes: 'function',\n    toBytes: 'function',\n    endo: 'object',\n    wrapPrivateKey: 'boolean'\n  });\n  const {\n    endo\n  } = curveOpts;\n  if (endo) {\n    // validateObject(endo, { beta: 'bigint', splitScalar: 'function' });\n    if (!Fp.is0(CURVE.a) || typeof endo.beta !== 'bigint' || !Array.isArray(endo.basises)) {\n      throw new Error('invalid endo: expected \"beta\": bigint and \"basises\": array');\n    }\n  }\n  function assertCompressionIsSupported() {\n    if (!Fp.isOdd) throw new Error('compression is not supported: Field does not have .isOdd()');\n  }\n  // Implements IEEE P1363 point encoding\n  function pointToBytes(_c, point, isCompressed) {\n    const {\n      x,\n      y\n    } = point.toAffine();\n    const bx = Fp.toBytes(x);\n    abool('isCompressed', isCompressed);\n    if (isCompressed) {\n      assertCompressionIsSupported();\n      const hasEvenY = !Fp.isOdd(y);\n      return concatBytes(pprefix(hasEvenY), bx);\n    } else {\n      return concatBytes(Uint8Array.of(0x04), bx, Fp.toBytes(y));\n    }\n  }\n  function pointFromBytes(bytes) {\n    abytes(bytes);\n    const L = Fp.BYTES;\n    const LC = L + 1; // length compressed, e.g. 33 for 32-byte field\n    const LU = 2 * L + 1; // length uncompressed, e.g. 65 for 32-byte field\n    const length = bytes.length;\n    const head = bytes[0];\n    const tail = bytes.subarray(1);\n    // No actual validation is done here: use .assertValidity()\n    if (length === LC && (head === 0x02 || head === 0x03)) {\n      const x = Fp.fromBytes(tail);\n      if (!Fp.isValid(x)) throw new Error('bad point: is not on curve, wrong x');\n      const y2 = weierstrassEquation(x); // y² = x³ + ax + b\n      let y;\n      try {\n        y = Fp.sqrt(y2); // y = y² ^ (p+1)/4\n      } catch (sqrtError) {\n        const err = sqrtError instanceof Error ? ': ' + sqrtError.message : '';\n        throw new Error('bad point: is not on curve, sqrt error' + err);\n      }\n      assertCompressionIsSupported();\n      const isYOdd = Fp.isOdd(y); // (y & _1n) === _1n;\n      const isHeadOdd = (head & 1) === 1; // ECDSA-specific\n      if (isHeadOdd !== isYOdd) y = Fp.neg(y);\n      return {\n        x,\n        y\n      };\n    } else if (length === LU && head === 0x04) {\n      // TODO: more checks\n      const x = Fp.fromBytes(tail.subarray(L * 0, L * 1));\n      const y = Fp.fromBytes(tail.subarray(L * 1, L * 2));\n      if (!isValidXY(x, y)) throw new Error('bad point: is not on curve');\n      return {\n        x,\n        y\n      };\n    } else {\n      throw new Error(`bad point: got length ${length}, expected compressed=${LC} or uncompressed=${LU}`);\n    }\n  }\n  const toBytes = curveOpts.toBytes || pointToBytes;\n  const fromBytes = curveOpts.fromBytes || pointFromBytes;\n  const weierstrassEquation = _legacyHelperEquat(Fp, CURVE.a, CURVE.b);\n  // TODO: move top-level\n  /** Checks whether equation holds for given x, y: y² == x³ + ax + b */\n  function isValidXY(x, y) {\n    const left = Fp.sqr(y); // y²\n    const right = weierstrassEquation(x); // x³ + ax + b\n    return Fp.eql(left, right);\n  }\n  // Validate whether the passed curve params are valid.\n  // Test 1: equation y² = x³ + ax + b should work for generator point.\n  if (!isValidXY(CURVE.Gx, CURVE.Gy)) throw new Error('bad curve params: generator point');\n  // Test 2: discriminant Δ part should be non-zero: 4a³ + 27b² != 0.\n  // Guarantees curve is genus-1, smooth (non-singular).\n  const _4a3 = Fp.mul(Fp.pow(CURVE.a, _3n), _4n);\n  const _27b2 = Fp.mul(Fp.sqr(CURVE.b), BigInt(27));\n  if (Fp.is0(Fp.add(_4a3, _27b2))) throw new Error('bad curve params: a or b');\n  /** Asserts coordinate is valid: 0 <= n < Fp.ORDER. */\n  function acoord(title, n) {\n    let banZero = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    if (!Fp.isValid(n) || banZero && Fp.is0(n)) throw new Error(`bad point coordinate ${title}`);\n    return n;\n  }\n  function aprjpoint(other) {\n    if (!(other instanceof Point)) throw new Error('ProjectivePoint expected');\n  }\n  function splitEndoScalarN(k) {\n    if (!endo || !endo.basises) throw new Error('no endo');\n    return _splitEndoScalar(k, endo.basises, Fn.ORDER);\n  }\n  // Memoized toAffine / validity check. They are heavy. Points are immutable.\n  // Converts Projective point to affine (x, y) coordinates.\n  // Can accept precomputed Z^-1 - for example, from invertBatch.\n  // (X, Y, Z) ∋ (x=X/Z, y=Y/Z)\n  const toAffineMemo = memoized((p, iz) => {\n    const {\n      X,\n      Y,\n      Z\n    } = p;\n    // Fast-path for normalized points\n    if (Fp.eql(Z, Fp.ONE)) return {\n      x: X,\n      y: Y\n    };\n    const is0 = p.is0();\n    // If invZ was 0, we return zero point. However we still want to execute\n    // all operations, so we replace invZ with a random number, 1.\n    if (iz == null) iz = is0 ? Fp.ONE : Fp.inv(Z);\n    const x = Fp.mul(X, iz);\n    const y = Fp.mul(Y, iz);\n    const zz = Fp.mul(Z, iz);\n    if (is0) return {\n      x: Fp.ZERO,\n      y: Fp.ZERO\n    };\n    if (!Fp.eql(zz, Fp.ONE)) throw new Error('invZ was invalid');\n    return {\n      x,\n      y\n    };\n  });\n  // NOTE: on exception this will crash 'cached' and no value will be set.\n  // Otherwise true will be return\n  const assertValidMemo = memoized(p => {\n    if (p.is0()) {\n      // (0, 1, 0) aka ZERO is invalid in most contexts.\n      // In BLS, ZERO can be serialized, so we allow it.\n      // (0, 0, 0) is invalid representation of ZERO.\n      if (curveOpts.allowInfinityPoint && !Fp.is0(p.Y)) return;\n      throw new Error('bad point: ZERO');\n    }\n    // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\n    const {\n      x,\n      y\n    } = p.toAffine();\n    if (!Fp.isValid(x) || !Fp.isValid(y)) throw new Error('bad point: x or y not field elements');\n    if (!isValidXY(x, y)) throw new Error('bad point: equation left != right');\n    if (!p.isTorsionFree()) throw new Error('bad point: not in prime-order subgroup');\n    return true;\n  });\n  function finishEndo(endoBeta, k1p, k2p, k1neg, k2neg) {\n    k2p = new Point(Fp.mul(k2p.X, endoBeta), k2p.Y, k2p.Z);\n    k1p = negateCt(k1neg, k1p);\n    k2p = negateCt(k2neg, k2p);\n    return k1p.add(k2p);\n  }\n  /**\n   * Projective Point works in 3d / projective (homogeneous) coordinates:(X, Y, Z) ∋ (x=X/Z, y=Y/Z).\n   * Default Point works in 2d / affine coordinates: (x, y).\n   * We're doing calculations in projective, because its operations don't require costly inversion.\n   */\n  class Point {\n    /** Does NOT validate if the point is valid. Use `.assertValidity()`. */\n    constructor(X, Y, Z) {\n      this.X = acoord('x', X);\n      this.Y = acoord('y', Y, true);\n      this.Z = acoord('z', Z);\n      Object.freeze(this);\n    }\n    /** Does NOT validate if the point is valid. Use `.assertValidity()`. */\n    static fromAffine(p) {\n      const {\n        x,\n        y\n      } = p || {};\n      if (!p || !Fp.isValid(x) || !Fp.isValid(y)) throw new Error('invalid affine point');\n      if (p instanceof Point) throw new Error('projective point not allowed');\n      // (0, 0) would've produced (0, 0, 1) - instead, we need (0, 1, 0)\n      if (Fp.is0(x) && Fp.is0(y)) return Point.ZERO;\n      return new Point(x, y, Fp.ONE);\n    }\n    get x() {\n      return this.toAffine().x;\n    }\n    get y() {\n      return this.toAffine().y;\n    }\n    // TODO: remove\n    get px() {\n      return this.X;\n    }\n    get py() {\n      return this.X;\n    }\n    get pz() {\n      return this.Z;\n    }\n    static normalizeZ(points) {\n      return normalizeZ(Point, points);\n    }\n    static fromBytes(bytes) {\n      abytes(bytes);\n      return Point.fromHex(bytes);\n    }\n    /** Converts hash string or Uint8Array to Point. */\n    static fromHex(hex) {\n      const P = Point.fromAffine(fromBytes(ensureBytes('pointHex', hex)));\n      P.assertValidity();\n      return P;\n    }\n    /** Multiplies generator point by privateKey. */\n    static fromPrivateKey(privateKey) {\n      return Point.BASE.multiply(_normFnElement(Fn, privateKey));\n    }\n    // TODO: remove\n    static msm(points, scalars) {\n      return pippenger(Point, Fn, points, scalars);\n    }\n    _setWindowSize(windowSize) {\n      this.precompute(windowSize);\n    }\n    /**\n     *\n     * @param windowSize\n     * @param isLazy true will defer table computation until the first multiplication\n     * @returns\n     */\n    precompute() {\n      let windowSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 8;\n      let isLazy = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      wnaf.createCache(this, windowSize);\n      if (!isLazy) this.multiply(_3n); // random number\n      return this;\n    }\n    // TODO: return `this`\n    /** A point on curve is valid if it conforms to equation. */\n    assertValidity() {\n      assertValidMemo(this);\n    }\n    hasEvenY() {\n      const {\n        y\n      } = this.toAffine();\n      if (!Fp.isOdd) throw new Error(\"Field doesn't support isOdd\");\n      return !Fp.isOdd(y);\n    }\n    /** Compare one point to another. */\n    equals(other) {\n      aprjpoint(other);\n      const {\n        X: X1,\n        Y: Y1,\n        Z: Z1\n      } = this;\n      const {\n        X: X2,\n        Y: Y2,\n        Z: Z2\n      } = other;\n      const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\n      const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\n      return U1 && U2;\n    }\n    /** Flips point to one corresponding to (x, -y) in Affine coordinates. */\n    negate() {\n      return new Point(this.X, Fp.neg(this.Y), this.Z);\n    }\n    // Renes-Costello-Batina exception-free doubling formula.\n    // There is 30% faster Jacobian formula, but it is not complete.\n    // https://eprint.iacr.org/2015/1060, algorithm 3\n    // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\n    double() {\n      const {\n        a,\n        b\n      } = CURVE;\n      const b3 = Fp.mul(b, _3n);\n      const {\n        X: X1,\n        Y: Y1,\n        Z: Z1\n      } = this;\n      let X3 = Fp.ZERO,\n        Y3 = Fp.ZERO,\n        Z3 = Fp.ZERO; // prettier-ignore\n      let t0 = Fp.mul(X1, X1); // step 1\n      let t1 = Fp.mul(Y1, Y1);\n      let t2 = Fp.mul(Z1, Z1);\n      let t3 = Fp.mul(X1, Y1);\n      t3 = Fp.add(t3, t3); // step 5\n      Z3 = Fp.mul(X1, Z1);\n      Z3 = Fp.add(Z3, Z3);\n      X3 = Fp.mul(a, Z3);\n      Y3 = Fp.mul(b3, t2);\n      Y3 = Fp.add(X3, Y3); // step 10\n      X3 = Fp.sub(t1, Y3);\n      Y3 = Fp.add(t1, Y3);\n      Y3 = Fp.mul(X3, Y3);\n      X3 = Fp.mul(t3, X3);\n      Z3 = Fp.mul(b3, Z3); // step 15\n      t2 = Fp.mul(a, t2);\n      t3 = Fp.sub(t0, t2);\n      t3 = Fp.mul(a, t3);\n      t3 = Fp.add(t3, Z3);\n      Z3 = Fp.add(t0, t0); // step 20\n      t0 = Fp.add(Z3, t0);\n      t0 = Fp.add(t0, t2);\n      t0 = Fp.mul(t0, t3);\n      Y3 = Fp.add(Y3, t0);\n      t2 = Fp.mul(Y1, Z1); // step 25\n      t2 = Fp.add(t2, t2);\n      t0 = Fp.mul(t2, t3);\n      X3 = Fp.sub(X3, t0);\n      Z3 = Fp.mul(t2, t1);\n      Z3 = Fp.add(Z3, Z3); // step 30\n      Z3 = Fp.add(Z3, Z3);\n      return new Point(X3, Y3, Z3);\n    }\n    // Renes-Costello-Batina exception-free addition formula.\n    // There is 30% faster Jacobian formula, but it is not complete.\n    // https://eprint.iacr.org/2015/1060, algorithm 1\n    // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\n    add(other) {\n      aprjpoint(other);\n      const {\n        X: X1,\n        Y: Y1,\n        Z: Z1\n      } = this;\n      const {\n        X: X2,\n        Y: Y2,\n        Z: Z2\n      } = other;\n      let X3 = Fp.ZERO,\n        Y3 = Fp.ZERO,\n        Z3 = Fp.ZERO; // prettier-ignore\n      const a = CURVE.a;\n      const b3 = Fp.mul(CURVE.b, _3n);\n      let t0 = Fp.mul(X1, X2); // step 1\n      let t1 = Fp.mul(Y1, Y2);\n      let t2 = Fp.mul(Z1, Z2);\n      let t3 = Fp.add(X1, Y1);\n      let t4 = Fp.add(X2, Y2); // step 5\n      t3 = Fp.mul(t3, t4);\n      t4 = Fp.add(t0, t1);\n      t3 = Fp.sub(t3, t4);\n      t4 = Fp.add(X1, Z1);\n      let t5 = Fp.add(X2, Z2); // step 10\n      t4 = Fp.mul(t4, t5);\n      t5 = Fp.add(t0, t2);\n      t4 = Fp.sub(t4, t5);\n      t5 = Fp.add(Y1, Z1);\n      X3 = Fp.add(Y2, Z2); // step 15\n      t5 = Fp.mul(t5, X3);\n      X3 = Fp.add(t1, t2);\n      t5 = Fp.sub(t5, X3);\n      Z3 = Fp.mul(a, t4);\n      X3 = Fp.mul(b3, t2); // step 20\n      Z3 = Fp.add(X3, Z3);\n      X3 = Fp.sub(t1, Z3);\n      Z3 = Fp.add(t1, Z3);\n      Y3 = Fp.mul(X3, Z3);\n      t1 = Fp.add(t0, t0); // step 25\n      t1 = Fp.add(t1, t0);\n      t2 = Fp.mul(a, t2);\n      t4 = Fp.mul(b3, t4);\n      t1 = Fp.add(t1, t2);\n      t2 = Fp.sub(t0, t2); // step 30\n      t2 = Fp.mul(a, t2);\n      t4 = Fp.add(t4, t2);\n      t0 = Fp.mul(t1, t4);\n      Y3 = Fp.add(Y3, t0);\n      t0 = Fp.mul(t5, t4); // step 35\n      X3 = Fp.mul(t3, X3);\n      X3 = Fp.sub(X3, t0);\n      t0 = Fp.mul(t3, t1);\n      Z3 = Fp.mul(t5, Z3);\n      Z3 = Fp.add(Z3, t0); // step 40\n      return new Point(X3, Y3, Z3);\n    }\n    subtract(other) {\n      return this.add(other.negate());\n    }\n    is0() {\n      return this.equals(Point.ZERO);\n    }\n    /**\n     * Constant time multiplication.\n     * Uses wNAF method. Windowed method may be 10% faster,\n     * but takes 2x longer to generate and consumes 2x memory.\n     * Uses precomputes when available.\n     * Uses endomorphism for Koblitz curves.\n     * @param scalar by which the point would be multiplied\n     * @returns New point\n     */\n    multiply(scalar) {\n      const {\n        endo\n      } = curveOpts;\n      if (!Fn.isValidNot0(scalar)) throw new Error('invalid scalar: out of range'); // 0 is invalid\n      let point, fake; // Fake point is used to const-time mult\n      const mul = n => wnaf.cached(this, n, p => normalizeZ(Point, p));\n      /** See docs for {@link EndomorphismOpts} */\n      if (endo) {\n        const {\n          k1neg,\n          k1,\n          k2neg,\n          k2\n        } = splitEndoScalarN(scalar);\n        const {\n          p: k1p,\n          f: k1f\n        } = mul(k1);\n        const {\n          p: k2p,\n          f: k2f\n        } = mul(k2);\n        fake = k1f.add(k2f);\n        point = finishEndo(endo.beta, k1p, k2p, k1neg, k2neg);\n      } else {\n        const {\n          p,\n          f\n        } = mul(scalar);\n        point = p;\n        fake = f;\n      }\n      // Normalize `z` for both points, but return only real one\n      return normalizeZ(Point, [point, fake])[0];\n    }\n    /**\n     * Non-constant-time multiplication. Uses double-and-add algorithm.\n     * It's faster, but should only be used when you don't care about\n     * an exposed secret key e.g. sig verification, which works over *public* keys.\n     */\n    multiplyUnsafe(sc) {\n      const {\n        endo\n      } = curveOpts;\n      const p = this;\n      if (!Fn.isValid(sc)) throw new Error('invalid scalar: out of range'); // 0 is valid\n      if (sc === _0n || p.is0()) return Point.ZERO;\n      if (sc === _1n) return p; // fast-path\n      if (wnaf.hasCache(this)) return this.multiply(sc);\n      if (endo) {\n        const {\n          k1neg,\n          k1,\n          k2neg,\n          k2\n        } = splitEndoScalarN(sc);\n        const {\n          p1,\n          p2\n        } = mulEndoUnsafe(Point, p, k1, k2); // 30% faster vs wnaf.unsafe\n        return finishEndo(endo.beta, p1, p2, k1neg, k2neg);\n      } else {\n        return wnaf.unsafe(p, sc);\n      }\n    }\n    multiplyAndAddUnsafe(Q, a, b) {\n      const sum = this.multiplyUnsafe(a).add(Q.multiplyUnsafe(b));\n      return sum.is0() ? undefined : sum;\n    }\n    /**\n     * Converts Projective point to affine (x, y) coordinates.\n     * @param invertedZ Z^-1 (inverted zero) - optional, precomputation is useful for invertBatch\n     */\n    toAffine(invertedZ) {\n      return toAffineMemo(this, invertedZ);\n    }\n    /**\n     * Checks whether Point is free of torsion elements (is in prime subgroup).\n     * Always torsion-free for cofactor=1 curves.\n     */\n    isTorsionFree() {\n      const {\n        isTorsionFree\n      } = curveOpts;\n      if (cofactor === _1n) return true;\n      if (isTorsionFree) return isTorsionFree(Point, this);\n      return wnaf.unsafe(this, CURVE_ORDER).is0();\n    }\n    clearCofactor() {\n      const {\n        clearCofactor\n      } = curveOpts;\n      if (cofactor === _1n) return this; // Fast-path\n      if (clearCofactor) return clearCofactor(Point, this);\n      return this.multiplyUnsafe(cofactor);\n    }\n    isSmallOrder() {\n      // can we use this.clearCofactor()?\n      return this.multiplyUnsafe(cofactor).is0();\n    }\n    toBytes() {\n      let isCompressed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      abool('isCompressed', isCompressed);\n      this.assertValidity();\n      return toBytes(Point, this, isCompressed);\n    }\n    /** @deprecated use `toBytes` */\n    toRawBytes() {\n      let isCompressed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      return this.toBytes(isCompressed);\n    }\n    toHex() {\n      let isCompressed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      return bytesToHex(this.toBytes(isCompressed));\n    }\n    toString() {\n      return `<Point ${this.is0() ? 'ZERO' : this.toHex()}>`;\n    }\n  }\n  // base / generator point\n  Point.BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\n  // zero / infinity / identity point\n  Point.ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO); // 0, 1, 0\n  // fields\n  Point.Fp = Fp;\n  Point.Fn = Fn;\n  const bits = Fn.BITS;\n  const wnaf = new wNAF(Point, curveOpts.endo ? Math.ceil(bits / 2) : bits);\n  return Point;\n}\n// _legacyWeierstrass\n// TODO: remove\n/** @deprecated use `weierstrass` in newer releases */\nexport function weierstrassPoints(c) {\n  const {\n    CURVE,\n    curveOpts\n  } = _weierstrass_legacy_opts_to_new(c);\n  const Point = weierstrassN(CURVE, curveOpts);\n  return _weierstrass_new_output_to_legacy(c, Point);\n}\n// Points start with byte 0x02 when y is even; otherwise 0x03\nfunction pprefix(hasEvenY) {\n  return Uint8Array.of(hasEvenY ? 0x02 : 0x03);\n}\n/**\n * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.\n * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.\n * b = True and y = sqrt(u / v) if (u / v) is square in F, and\n * b = False and y = sqrt(Z * (u / v)) otherwise.\n * @param Fp\n * @param Z\n * @returns\n */\nexport function SWUFpSqrtRatio(Fp, Z) {\n  // Generic implementation\n  const q = Fp.ORDER;\n  let l = _0n;\n  for (let o = q - _1n; o % _2n === _0n; o /= _2n) l += _1n;\n  const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\n  // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.\n  // 2n ** c1 == 2n << (c1-1)\n  const _2n_pow_c1_1 = _2n << c1 - _1n - _1n;\n  const _2n_pow_c1 = _2n_pow_c1_1 * _2n;\n  const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic\n  const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\n  const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\n  const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic\n  const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\n  const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\n  let sqrtRatio = (u, v) => {\n    let tv1 = c6; // 1. tv1 = c6\n    let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\n    let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\n    tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\n    let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\n    tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\n    tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\n    tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\n    tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\n    let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\n    tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\n    let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\n    tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\n    tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\n    tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\n    tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\n    // 17. for i in (c1, c1 - 1, ..., 2):\n    for (let i = c1; i > _1n; i--) {\n      let tv5 = i - _2n; // 18.    tv5 = i - 2\n      tv5 = _2n << tv5 - _1n; // 19.    tv5 = 2^tv5\n      let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5\n      const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\n      tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\n      tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\n      tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\n      tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\n      tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\n    }\n    return {\n      isValid: isQR,\n      value: tv3\n    };\n  };\n  if (Fp.ORDER % _4n === _3n) {\n    // sqrt_ratio_3mod4(u, v)\n    const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\n    const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\n    sqrtRatio = (u, v) => {\n      let tv1 = Fp.sqr(v); // 1. tv1 = v^2\n      const tv2 = Fp.mul(u, v); // 2. tv2 = u * v\n      tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\n      let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1\n      y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\n      const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2\n      const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\n      const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\n      let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\n      return {\n        isValid: isQR,\n        value: y\n      }; // 11. return (isQR, y) isQR ? y : y*c2\n    };\n  }\n  // No curves uses that\n  // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\n  return sqrtRatio;\n}\n/**\n * Simplified Shallue-van de Woestijne-Ulas Method\n * https://www.rfc-editor.org/rfc/rfc9380#section-6.6.2\n */\nexport function mapToCurveSimpleSWU(Fp, opts) {\n  validateField(Fp);\n  const {\n    A,\n    B,\n    Z\n  } = opts;\n  if (!Fp.isValid(A) || !Fp.isValid(B) || !Fp.isValid(Z)) throw new Error('mapToCurveSimpleSWU: invalid opts');\n  const sqrtRatio = SWUFpSqrtRatio(Fp, Z);\n  if (!Fp.isOdd) throw new Error('Field does not have .isOdd()');\n  // Input: u, an element of F.\n  // Output: (x, y), a point on E.\n  return u => {\n    // prettier-ignore\n    let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\n    tv1 = Fp.sqr(u); // 1.  tv1 = u^2\n    tv1 = Fp.mul(tv1, Z); // 2.  tv1 = Z * tv1\n    tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\n    tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\n    tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\n    tv3 = Fp.mul(tv3, B); // 6.  tv3 = B * tv3\n    tv4 = Fp.cmov(Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\n    tv4 = Fp.mul(tv4, A); // 8.  tv4 = A * tv4\n    tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\n    tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\n    tv5 = Fp.mul(tv6, A); // 11. tv5 = A * tv6\n    tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\n    tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\n    tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\n    tv5 = Fp.mul(tv6, B); // 15. tv5 = B * tv6\n    tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\n    x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\n    const {\n      isValid,\n      value\n    } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\n    y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\n    y = Fp.mul(y, value); // 20.   y = y * y1\n    x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\n    y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\n    const e1 = Fp.isOdd(u) === Fp.isOdd(y); // 23.  e1 = sgn0(u) == sgn0(y)\n    y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\n    const tv4_inv = FpInvertBatch(Fp, [tv4], true)[0];\n    x = Fp.mul(x, tv4_inv); // 25.   x = x / tv4\n    return {\n      x,\n      y\n    };\n  };\n}\n/**\n * Creates ECDSA for given elliptic curve Point and hash function.\n */\nexport function ecdsa(Point, hash) {\n  let ecdsaOpts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  ahash(hash);\n  _validateObject(ecdsaOpts, {}, {\n    hmac: 'function',\n    lowS: 'boolean',\n    randomBytes: 'function',\n    bits2int: 'function',\n    bits2int_modN: 'function'\n  });\n  const randomBytes_ = ecdsaOpts.randomBytes || randomBytes;\n  const hmac_ = ecdsaOpts.hmac || function (key) {\n    for (var _len = arguments.length, msgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      msgs[_key - 1] = arguments[_key];\n    }\n    return hmac(hash, key, concatBytes(...msgs));\n  };\n  const {\n    Fp,\n    Fn\n  } = Point;\n  const {\n    ORDER: CURVE_ORDER,\n    BITS: fnBits\n  } = Fn;\n  const seedLen = getMinHashLength(CURVE_ORDER);\n  const lengths = {\n    secret: Fn.BYTES,\n    public: 1 + Fp.BYTES,\n    publicUncompressed: 1 + 2 * Fp.BYTES,\n    signature: 2 * Fn.BYTES,\n    seed: seedLen\n  };\n  function isBiggerThanHalfOrder(number) {\n    const HALF = CURVE_ORDER >> _1n;\n    return number > HALF;\n  }\n  function normalizeS(s) {\n    return isBiggerThanHalfOrder(s) ? Fn.neg(s) : s;\n  }\n  function aValidRS(title, num) {\n    if (!Fn.isValidNot0(num)) throw new Error(`invalid signature ${title}: out of range 1..CURVE.n`);\n  }\n  /**\n   * ECDSA signature with its (r, s) properties. Supports DER & compact representations.\n   */\n  class Signature {\n    constructor(r, s, recovery) {\n      aValidRS('r', r); // r in [1..N-1]\n      aValidRS('s', s); // s in [1..N-1]\n      this.r = r;\n      this.s = s;\n      if (recovery != null) this.recovery = recovery;\n      Object.freeze(this);\n    }\n    static fromBytes(bytes) {\n      let format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'compact';\n      if (format === 'compact') {\n        const L = Fn.BYTES;\n        abytes(bytes, L * 2);\n        const r = bytes.subarray(0, L);\n        const s = bytes.subarray(L, L * 2);\n        return new Signature(Fn.fromBytes(r), Fn.fromBytes(s));\n      }\n      if (format === 'der') {\n        abytes(bytes);\n        const {\n          r,\n          s\n        } = DER.toSig(bytes);\n        return new Signature(r, s);\n      }\n      throw new Error('invalid format');\n    }\n    static fromHex(hex, format) {\n      return this.fromBytes(hexToBytes(hex), format);\n    }\n    addRecoveryBit(recovery) {\n      return new Signature(this.r, this.s, recovery);\n    }\n    // ProjPointType<bigint>\n    recoverPublicKey(msgHash) {\n      const FIELD_ORDER = Fp.ORDER;\n      const {\n        r,\n        s,\n        recovery: rec\n      } = this;\n      if (rec == null || ![0, 1, 2, 3].includes(rec)) throw new Error('recovery id invalid');\n      // ECDSA recovery is hard for cofactor > 1 curves.\n      // In sign, `r = q.x mod n`, and here we recover q.x from r.\n      // While recovering q.x >= n, we need to add r+n for cofactor=1 curves.\n      // However, for cofactor>1, r+n may not get q.x:\n      // r+n*i would need to be done instead where i is unknown.\n      // To easily get i, we either need to:\n      // a. increase amount of valid recid values (4, 5...); OR\n      // b. prohibit non-prime-order signatures (recid > 1).\n      const hasCofactor = CURVE_ORDER * _2n < FIELD_ORDER;\n      if (hasCofactor && rec > 1) throw new Error('recovery id is ambiguous for h>1 curve');\n      const radj = rec === 2 || rec === 3 ? r + CURVE_ORDER : r;\n      if (!Fp.isValid(radj)) throw new Error('recovery id 2 or 3 invalid');\n      const x = Fp.toBytes(radj);\n      const R = Point.fromHex(concatBytes(pprefix((rec & 1) === 0), x));\n      const ir = Fn.inv(radj); // r^-1\n      const h = bits2int_modN(ensureBytes('msgHash', msgHash)); // Truncate hash\n      const u1 = Fn.create(-h * ir); // -hr^-1\n      const u2 = Fn.create(s * ir); // sr^-1\n      // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1). unsafe is fine: there is no private data.\n      const Q = Point.BASE.multiplyUnsafe(u1).add(R.multiplyUnsafe(u2));\n      if (Q.is0()) throw new Error('point at infinify');\n      Q.assertValidity();\n      return Q;\n    }\n    // Signatures should be low-s, to prevent malleability.\n    hasHighS() {\n      return isBiggerThanHalfOrder(this.s);\n    }\n    normalizeS() {\n      return this.hasHighS() ? new Signature(this.r, Fn.neg(this.s), this.recovery) : this;\n    }\n    toBytes() {\n      let format = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'compact';\n      if (format === 'compact') return concatBytes(Fn.toBytes(this.r), Fn.toBytes(this.s));\n      if (format === 'der') return hexToBytes(DER.hexFromSig(this));\n      throw new Error('invalid format');\n    }\n    toHex(format) {\n      return bytesToHex(this.toBytes(format));\n    }\n    // TODO: remove\n    assertValidity() {}\n    static fromCompact(hex) {\n      return Signature.fromBytes(ensureBytes('sig', hex), 'compact');\n    }\n    static fromDER(hex) {\n      return Signature.fromBytes(ensureBytes('sig', hex), 'der');\n    }\n    toDERRawBytes() {\n      return this.toBytes('der');\n    }\n    toDERHex() {\n      return bytesToHex(this.toBytes('der'));\n    }\n    toCompactRawBytes() {\n      return this.toBytes('compact');\n    }\n    toCompactHex() {\n      return bytesToHex(this.toBytes('compact'));\n    }\n  }\n  function isValidSecretKey(privateKey) {\n    try {\n      return !!_normFnElement(Fn, privateKey);\n    } catch (error) {\n      return false;\n    }\n  }\n  function isValidPublicKey(publicKey, isCompressed) {\n    try {\n      const l = publicKey.length;\n      if (isCompressed === true && l !== lengths.public) return false;\n      if (isCompressed === false && l !== lengths.publicUncompressed) return false;\n      return !!Point.fromBytes(publicKey);\n    } catch (error) {\n      return false;\n    }\n  }\n  /**\n   * Produces cryptographically secure secret key from random of size\n   * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.\n   */\n  function randomSecretKey() {\n    let seed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : randomBytes_(seedLen);\n    return mapHashToField(seed, CURVE_ORDER);\n  }\n  const utils = {\n    isValidSecretKey,\n    isValidPublicKey,\n    randomSecretKey,\n    // TODO: remove\n    isValidPrivateKey: isValidSecretKey,\n    randomPrivateKey: randomSecretKey,\n    normPrivateKeyToScalar: key => _normFnElement(Fn, key),\n    precompute() {\n      let windowSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 8;\n      let point = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Point.BASE;\n      return point.precompute(windowSize, false);\n    }\n  };\n  /**\n   * Computes public key for a secret key. Checks for validity of the secret key.\n   * @param isCompressed whether to return compact (default), or full key\n   * @returns Public key, full when isCompressed=false; short when isCompressed=true\n   */\n  function getPublicKey(secretKey) {\n    let isCompressed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    return Point.BASE.multiply(_normFnElement(Fn, secretKey)).toBytes(isCompressed);\n  }\n  /**\n   * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\n   */\n  function isProbPub(item) {\n    // TODO: remove\n    if (typeof item === 'bigint') return false;\n    // TODO: remove\n    if (item instanceof Point) return true;\n    if (Fn.allowedLengths || lengths.secret === lengths.public) return undefined;\n    const l = ensureBytes('key', item).length;\n    return l === lengths.public || l === lengths.publicUncompressed;\n  }\n  /**\n   * ECDH (Elliptic Curve Diffie Hellman).\n   * Computes shared public key from secret key A and public key B.\n   * Checks: 1) secret key validity 2) shared key is on-curve.\n   * Does NOT hash the result.\n   * @param isCompressed whether to return compact (default), or full key\n   * @returns shared public key\n   */\n  function getSharedSecret(secretKeyA, publicKeyB) {\n    let isCompressed = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    if (isProbPub(secretKeyA) === true) throw new Error('first arg must be private key');\n    if (isProbPub(publicKeyB) === false) throw new Error('second arg must be public key');\n    const s = _normFnElement(Fn, secretKeyA);\n    const b = Point.fromHex(publicKeyB); // checks for being on-curve\n    return b.multiply(s).toBytes(isCompressed);\n  }\n  // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\n  // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\n  // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\n  // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\n  const bits2int = ecdsaOpts.bits2int || function (bytes) {\n    // Our custom check \"just in case\", for protection against DoS\n    if (bytes.length > 8192) throw new Error('input is too large');\n    // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\n    // for some cases, since bytes.length * 8 is not actual bitLength.\n    const num = bytesToNumberBE(bytes); // check for == u8 done here\n    const delta = bytes.length * 8 - fnBits; // truncate to nBitLength leftmost bits\n    return delta > 0 ? num >> BigInt(delta) : num;\n  };\n  const bits2int_modN = ecdsaOpts.bits2int_modN || function (bytes) {\n    return Fn.create(bits2int(bytes)); // can't use bytesToNumberBE here\n  };\n  // NOTE: pads output with zero as per spec\n  const ORDER_MASK = bitMask(fnBits);\n  /**\n   * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.\n   */\n  function int2octets(num) {\n    // IMPORTANT: the check ensures working for case `Fn.BYTES != Fn.BITS * 8`\n    aInRange('num < 2^' + fnBits, num, _0n, ORDER_MASK);\n    return Fn.toBytes(num);\n  }\n  // Steps A, D of RFC6979 3.2\n  // Creates RFC6979 seed; converts msg/privKey to numbers.\n  // Used only in sign, not in verify.\n  // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order,\n  // this will be invalid at least for P521. Also it can be bigger for P224 + SHA256\n  function prepSig(msgHash, privateKey) {\n    let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultSigOpts;\n    if (['recovered', 'canonical'].some(k => k in opts)) throw new Error('sign() legacy options not supported');\n    let {\n      lowS,\n      prehash,\n      extraEntropy: ent\n    } = opts; // generates low-s sigs by default\n    if (lowS == null) lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash\n    msgHash = ensureBytes('msgHash', msgHash);\n    validateSigVerOpts(opts);\n    if (prehash) msgHash = ensureBytes('prehashed msgHash', hash(msgHash));\n    // We can't later call bits2octets, since nested bits2int is broken for curves\n    // with fnBits % 8 !== 0. Because of that, we unwrap it here as int2octets call.\n    // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\n    const h1int = bits2int_modN(msgHash);\n    const d = _normFnElement(Fn, privateKey); // validate secret key, convert to bigint\n    const seedArgs = [int2octets(d), int2octets(h1int)];\n    // extraEntropy. RFC6979 3.6: additional k' (optional).\n    if (ent != null && ent !== false) {\n      // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\n      const e = ent === true ? randomBytes_(lengths.secret) : ent; // gen random bytes OR pass as-is\n      seedArgs.push(ensureBytes('extraEntropy', e)); // check for being bytes\n    }\n    const seed = concatBytes(...seedArgs); // Step D of RFC6979 3.2\n    const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\n    // Converts signature params into point w r/s, checks result for validity.\n    // To transform k => Signature:\n    // q = k⋅G\n    // r = q.x mod n\n    // s = k^-1(m + rd) mod n\n    // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to\n    // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\n    // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\n    function k2sig(kBytes) {\n      // RFC 6979 Section 3.2, step 3: k = bits2int(T)\n      // Important: all mod() calls here must be done over N\n      const k = bits2int(kBytes); // Cannot use fields methods, since it is group element\n      if (!Fn.isValidNot0(k)) return; // Valid scalars (including k) must be in 1..N-1\n      const ik = Fn.inv(k); // k^-1 mod n\n      const q = Point.BASE.multiply(k).toAffine(); // q = k⋅G\n      const r = Fn.create(q.x); // r = q.x mod n\n      if (r === _0n) return;\n      const s = Fn.create(ik * Fn.create(m + r * d)); // Not using blinding here, see comment above\n      if (s === _0n) return;\n      let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\n      let normS = s;\n      if (lowS && isBiggerThanHalfOrder(s)) {\n        normS = normalizeS(s); // if lowS was passed, ensure s is always\n        recovery ^= 1; // // in the bottom half of N\n      }\n      return new Signature(r, normS, recovery); // use normS, not s\n    }\n    return {\n      seed,\n      k2sig\n    };\n  }\n  const defaultSigOpts = {\n    lowS: ecdsaOpts.lowS,\n    prehash: false\n  };\n  const defaultVerOpts = {\n    lowS: ecdsaOpts.lowS,\n    prehash: false\n  };\n  /**\n   * Signs message hash with a secret key.\n   * ```\n   * sign(m, d, k) where\n   *   (x, y) = G × k\n   *   r = x mod n\n   *   s = (m + dr)/k mod n\n   * ```\n   */\n  function sign(msgHash, secretKey) {\n    let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultSigOpts;\n    const {\n      seed,\n      k2sig\n    } = prepSig(msgHash, secretKey, opts); // Steps A, D of RFC6979 3.2.\n    const drbg = createHmacDrbg(hash.outputLen, Fn.BYTES, hmac_);\n    return drbg(seed, k2sig); // Steps B, C, D, E, F, G\n  }\n  // Enable precomputes. Slows down first publicKey computation by 20ms.\n  Point.BASE.precompute(8);\n  /**\n   * Verifies a signature against message hash and public key.\n   * Rejects lowS signatures by default: to override,\n   * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\n   *\n   * ```\n   * verify(r, s, h, P) where\n   *   U1 = hs^-1 mod n\n   *   U2 = rs^-1 mod n\n   *   R = U1⋅G - U2⋅P\n   *   mod(R.x, n) == r\n   * ```\n   */\n  function verify(signature, msgHash, publicKey) {\n    let opts = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : defaultVerOpts;\n    const sg = signature;\n    msgHash = ensureBytes('msgHash', msgHash);\n    publicKey = ensureBytes('publicKey', publicKey);\n    // Verify opts\n    validateSigVerOpts(opts);\n    const {\n      lowS,\n      prehash,\n      format\n    } = opts;\n    // TODO: remove\n    if ('strict' in opts) throw new Error('options.strict was renamed to lowS');\n    let _sig = undefined;\n    let P;\n    if (format === undefined) {\n      // Try to deduce format\n      const isHex = typeof sg === 'string' || isBytes(sg);\n      const isObj = !isHex && sg !== null && typeof sg === 'object' && typeof sg.r === 'bigint' && typeof sg.s === 'bigint';\n      if (!isHex && !isObj) throw new Error('invalid signature, expected Uint8Array, hex string or Signature instance');\n      if (isObj) {\n        _sig = new Signature(sg.r, sg.s);\n      } else if (isHex) {\n        // TODO: remove this malleable check\n        // Signature can be represented in 2 ways: compact (2*Fn.BYTES) & DER (variable-length).\n        // Since DER can also be 2*Fn.BYTES bytes, we check for it first.\n        try {\n          _sig = Signature.fromDER(sg);\n        } catch (derError) {\n          if (!(derError instanceof DER.Err)) throw derError;\n        }\n        if (!_sig) {\n          try {\n            _sig = Signature.fromCompact(sg);\n          } catch (error) {\n            return false;\n          }\n        }\n      }\n    } else {\n      if (format === 'compact' || format === 'der') {\n        if (typeof sg !== 'string' && !isBytes(sg)) throw new Error('\"der\" / \"compact\" format expects Uint8Array signature');\n        _sig = Signature.fromBytes(ensureBytes('sig', sg), format);\n      } else if (format === 'js') {\n        if (!(sg instanceof Signature)) throw new Error('\"js\" format expects Signature instance');\n        _sig = sg;\n      } else {\n        throw new Error('format must be \"compact\", \"der\" or \"js\"');\n      }\n    }\n    if (!_sig) return false;\n    try {\n      P = Point.fromHex(publicKey);\n      if (lowS && _sig.hasHighS()) return false;\n      // todo: optional.hash => hash\n      if (prehash) msgHash = hash(msgHash);\n      const {\n        r,\n        s\n      } = _sig;\n      const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element\n      const is = Fn.inv(s); // s^-1\n      const u1 = Fn.create(h * is); // u1 = hs^-1 mod n\n      const u2 = Fn.create(r * is); // u2 = rs^-1 mod n\n      const R = Point.BASE.multiplyUnsafe(u1).add(P.multiplyUnsafe(u2));\n      if (R.is0()) return false;\n      const v = Fn.create(R.x); // v = r.x mod n\n      return v === r;\n    } catch (e) {\n      return false;\n    }\n  }\n  function keygen(seed) {\n    const secretKey = utils.randomSecretKey(seed);\n    return {\n      secretKey,\n      publicKey: getPublicKey(secretKey)\n    };\n  }\n  return Object.freeze({\n    keygen,\n    getPublicKey,\n    sign,\n    verify,\n    getSharedSecret,\n    utils,\n    Point,\n    Signature,\n    info: {\n      type: 'weierstrass',\n      lengths,\n      publicKeyHasPrefix: true\n    }\n  });\n}\n// TODO: remove\nfunction _weierstrass_legacy_opts_to_new(c) {\n  const CURVE = {\n    a: c.a,\n    b: c.b,\n    p: c.Fp.ORDER,\n    n: c.n,\n    h: c.h,\n    Gx: c.Gx,\n    Gy: c.Gy\n  };\n  const Fp = c.Fp;\n  let allowedLengths = c.allowedPrivateKeyLengths ? Array.from(new Set(c.allowedPrivateKeyLengths.map(l => Math.ceil(l / 2)))) : undefined;\n  const Fn = Field(CURVE.n, {\n    BITS: c.nBitLength,\n    allowedLengths: allowedLengths,\n    modOnDecode: c.wrapPrivateKey\n  });\n  const curveOpts = {\n    Fp,\n    Fn,\n    allowInfinityPoint: c.allowInfinityPoint,\n    endo: c.endo,\n    isTorsionFree: c.isTorsionFree,\n    clearCofactor: c.clearCofactor,\n    fromBytes: c.fromBytes,\n    toBytes: c.toBytes\n  };\n  return {\n    CURVE,\n    curveOpts\n  };\n}\nfunction _ecdsa_legacy_opts_to_new(c) {\n  const {\n    CURVE,\n    curveOpts\n  } = _weierstrass_legacy_opts_to_new(c);\n  const ecdsaOpts = {\n    hmac: c.hmac,\n    randomBytes: c.randomBytes,\n    lowS: c.lowS,\n    bits2int: c.bits2int,\n    bits2int_modN: c.bits2int_modN\n  };\n  return {\n    CURVE,\n    curveOpts,\n    hash: c.hash,\n    ecdsaOpts\n  };\n}\n// TODO: remove\nfunction _weierstrass_new_output_to_legacy(c, Point) {\n  const {\n    Fp,\n    Fn\n  } = Point;\n  // TODO: remove\n  function isWithinCurveOrder(num) {\n    return inRange(num, _1n, Fn.ORDER);\n  }\n  const weierstrassEquation = _legacyHelperEquat(Fp, c.a, c.b);\n  return Object.assign({}, {\n    CURVE: c,\n    Point: Point,\n    ProjectivePoint: Point,\n    normPrivateKeyToScalar: key => _normFnElement(Fn, key),\n    weierstrassEquation,\n    isWithinCurveOrder\n  });\n}\n// TODO: remove\nfunction _ecdsa_new_output_to_legacy(c, ecdsa) {\n  return Object.assign({}, ecdsa, {\n    ProjectivePoint: ecdsa.Point,\n    CURVE: c\n  });\n}\n// _ecdsa_legacy\nexport function weierstrass(c) {\n  const {\n    CURVE,\n    curveOpts,\n    hash,\n    ecdsaOpts\n  } = _ecdsa_legacy_opts_to_new(c);\n  const Point = weierstrassN(CURVE, curveOpts);\n  const signs = ecdsa(Point, hash, ecdsaOpts);\n  return _ecdsa_new_output_to_legacy(c, signs);\n}","map":{"version":3,"names":["hmac","ahash","_validateObject","abool","abytes","aInRange","bitLen","bitMask","bytesToHex","bytesToNumberBE","concatBytes","createHmacDrbg","ensureBytes","hexToBytes","inRange","isBytes","memoized","numberToHexUnpadded","randomBytes","_createCurveFields","mulEndoUnsafe","negateCt","normalizeZ","pippenger","wNAF","Field","FpInvertBatch","getMinHashLength","mapHashToField","validateField","divNearest","num","den","_2n","_splitEndoScalar","k","basis","n","a1","b1","a2","b2","c1","c2","k1","k2","k1neg","_0n","k2neg","MAX_NUM","Math","ceil","_1n","Error","validateSigVerOpts","opts","lowS","undefined","prehash","DERErr","constructor","m","arguments","length","DER","Err","_tlv","encode","tag","data","E","dataLen","len","lenLen","t","decode","pos","first","isLong","lengthBytes","subarray","b","v","l","_int","hex","Number","parseInt","toSig","int","tlv","seqBytes","seqLeftBytes","rBytes","rLeftBytes","sBytes","sLeftBytes","r","s","hexFromSig","sig","rs","ss","seq","BigInt","_3n","_4n","_legacyHelperEquat","Fp","a","weierstrassEquation","x","x2","sqr","x3","mul","add","_normFnElement","Fn","key","BYTES","expected","bytes","fromBytes","error","isValidNot0","weierstrassN","CURVE","curveOpts","h","cofactor","CURVE_ORDER","allowInfinityPoint","clearCofactor","isTorsionFree","toBytes","endo","wrapPrivateKey","is0","beta","Array","isArray","basises","assertCompressionIsSupported","isOdd","pointToBytes","_c","point","isCompressed","y","toAffine","bx","hasEvenY","pprefix","Uint8Array","of","pointFromBytes","L","LC","LU","head","tail","isValid","y2","sqrt","sqrtError","err","message","isYOdd","isHeadOdd","neg","isValidXY","left","right","eql","Gx","Gy","_4a3","pow","_27b2","acoord","title","banZero","aprjpoint","other","Point","splitEndoScalarN","ORDER","toAffineMemo","p","iz","X","Y","Z","ONE","inv","zz","ZERO","assertValidMemo","finishEndo","endoBeta","k1p","k2p","Object","freeze","fromAffine","px","py","pz","points","fromHex","P","assertValidity","fromPrivateKey","privateKey","BASE","multiply","msm","scalars","_setWindowSize","windowSize","precompute","isLazy","wnaf","createCache","equals","X1","Y1","Z1","X2","Y2","Z2","U1","U2","negate","double","b3","X3","Y3","Z3","t0","t1","t2","t3","sub","t4","t5","subtract","scalar","fake","cached","f","k1f","k2f","multiplyUnsafe","sc","hasCache","p1","p2","unsafe","multiplyAndAddUnsafe","Q","sum","invertedZ","isSmallOrder","toRawBytes","toHex","toString","bits","BITS","weierstrassPoints","c","_weierstrass_legacy_opts_to_new","_weierstrass_new_output_to_legacy","SWUFpSqrtRatio","q","o","_2n_pow_c1_1","_2n_pow_c1","c3","c4","c5","c6","c7","sqrtRatio","u","tv1","tv2","tv3","tv5","tv4","isQR","cmov","i","tvv5","e1","value","y1","mapToCurveSimpleSWU","A","B","tv6","tv4_inv","ecdsa","hash","ecdsaOpts","bits2int","bits2int_modN","randomBytes_","hmac_","_len","msgs","_key","fnBits","seedLen","lengths","secret","public","publicUncompressed","signature","seed","isBiggerThanHalfOrder","number","HALF","normalizeS","aValidRS","Signature","recovery","format","addRecoveryBit","recoverPublicKey","msgHash","FIELD_ORDER","rec","includes","hasCofactor","radj","R","ir","u1","create","u2","hasHighS","fromCompact","fromDER","toDERRawBytes","toDERHex","toCompactRawBytes","toCompactHex","isValidSecretKey","isValidPublicKey","publicKey","randomSecretKey","utils","isValidPrivateKey","randomPrivateKey","normPrivateKeyToScalar","getPublicKey","secretKey","isProbPub","item","allowedLengths","getSharedSecret","secretKeyA","publicKeyB","delta","ORDER_MASK","int2octets","prepSig","defaultSigOpts","some","extraEntropy","ent","h1int","d","seedArgs","e","push","k2sig","kBytes","ik","normS","defaultVerOpts","sign","drbg","outputLen","verify","sg","_sig","isHex","isObj","derError","is","keygen","info","type","publicKeyHasPrefix","allowedPrivateKeyLengths","from","Set","map","nBitLength","modOnDecode","_ecdsa_legacy_opts_to_new","isWithinCurveOrder","assign","ProjectivePoint","_ecdsa_new_output_to_legacy","weierstrass","signs"],"sources":["C:\\dev.fun\\node_modules\\@solana\\web3.js\\node_modules\\@noble\\curves\\src\\abstract\\weierstrass.ts"],"sourcesContent":["/**\n * Short Weierstrass curve methods. The formula is: y² = x³ + ax + b.\n *\n * ### Design rationale for types\n *\n * * Interaction between classes from different curves should fail:\n *   `k256.Point.BASE.add(p256.Point.BASE)`\n * * For this purpose we want to use `instanceof` operator, which is fast and works during runtime\n * * Different calls of `curve()` would return different classes -\n *   `curve(params) !== curve(params)`: if somebody decided to monkey-patch their curve,\n *   it won't affect others\n *\n * TypeScript can't infer types for classes created inside a function. Classes is one instance\n * of nominative types in TypeScript and interfaces only check for shape, so it's hard to create\n * unique type for every function call.\n *\n * We can use generic types via some param, like curve opts, but that would:\n *     1. Enable interaction between `curve(params)` and `curve(params)` (curves of same params)\n *     which is hard to debug.\n *     2. Params can be generic and we can't enforce them to be constant value:\n *     if somebody creates curve from non-constant params,\n *     it would be allowed to interact with other curves with non-constant params\n *\n * @todo https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-7.html#unique-symbol\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { hmac } from '@noble/hashes/hmac.js';\nimport { ahash } from '@noble/hashes/utils';\nimport {\n  _validateObject,\n  abool,\n  abytes,\n  aInRange,\n  bitLen,\n  bitMask,\n  bytesToHex,\n  bytesToNumberBE,\n  concatBytes,\n  createHmacDrbg,\n  ensureBytes,\n  hexToBytes,\n  inRange,\n  isBytes,\n  memoized,\n  numberToHexUnpadded,\n  randomBytes,\n  type CHash,\n  type Hex,\n  type PrivKey,\n} from '../utils.ts';\nimport {\n  _createCurveFields,\n  mulEndoUnsafe,\n  negateCt,\n  normalizeZ,\n  pippenger,\n  wNAF,\n  type AffinePoint,\n  type BasicCurve,\n  type CurveInfo,\n  type CurvePoint,\n  type CurvePointCons,\n} from './curve.ts';\nimport {\n  Field,\n  FpInvertBatch,\n  getMinHashLength,\n  mapHashToField,\n  validateField,\n  type IField,\n  type NLength,\n} from './modular.ts';\n\nexport type { AffinePoint };\nexport type HmacFnSync = (key: Uint8Array, ...messages: Uint8Array[]) => Uint8Array;\n\ntype EndoBasis = [[bigint, bigint], [bigint, bigint]];\n/**\n * When Weierstrass curve has `a=0`, it becomes Koblitz curve.\n * Koblitz curves allow using **efficiently-computable GLV endomorphism ψ**.\n * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.\n * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.\n *\n * Endomorphism consists of beta, lambda and splitScalar:\n *\n * 1. GLV endomorphism ψ transforms a point: `P = (x, y) ↦ ψ(P) = (β·x mod p, y)`\n * 2. GLV scalar decomposition transforms a scalar: `k ≡ k₁ + k₂·λ (mod n)`\n * 3. Then these are combined: `k·P = k₁·P + k₂·ψ(P)`\n * 4. Two 128-bit point-by-scalar multiplications + one point addition is faster than\n *    one 256-bit multiplication.\n *\n * where\n * * beta: β ∈ Fₚ with β³ = 1, β ≠ 1\n * * lambda: λ ∈ Fₙ with λ³ = 1, λ ≠ 1\n * * splitScalar decomposes k ↦ k₁, k₂, by using reduced basis vectors.\n *   Gauss lattice reduction calculates them from initial basis vectors `(n, 0), (-λ, 0)`\n *\n * Check out `test/misc/endomorphism.js` and\n * [gist](https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066).\n */\nexport type EndomorphismOpts = {\n  beta: bigint;\n  basises?: EndoBasis;\n  splitScalar?: (k: bigint) => { k1neg: boolean; k1: bigint; k2neg: boolean; k2: bigint };\n};\nexport type BasicWCurve<T> = BasicCurve<T> & {\n  // Params: a, b\n  a: T;\n  b: T;\n\n  // Optional params\n  allowedPrivateKeyLengths?: readonly number[]; // for P521\n  wrapPrivateKey?: boolean; // bls12-381 requires mod(n) instead of rejecting keys >= n\n  endo?: EndomorphismOpts;\n  // When a cofactor != 1, there can be an effective methods to:\n  // 1. Determine whether a point is torsion-free\n  isTorsionFree?: (c: WeierstrassPointCons<T>, point: WeierstrassPoint<T>) => boolean;\n  // 2. Clear torsion component\n  clearCofactor?: (c: WeierstrassPointCons<T>, point: WeierstrassPoint<T>) => WeierstrassPoint<T>;\n};\n\n// We construct basis in such way that den is always positive and equals n, but num sign depends on basis (not on secret value)\nconst divNearest = (num: bigint, den: bigint) => (num + (num >= 0 ? den : -den) / _2n) / den;\n\nexport type ScalarEndoParts = { k1neg: boolean; k1: bigint; k2neg: boolean; k2: bigint };\n\n/**\n * Splits scalar for GLV endomorphism.\n */\nexport function _splitEndoScalar(k: bigint, basis: EndoBasis, n: bigint): ScalarEndoParts {\n  // Split scalar into two such that part is ~half bits: `abs(part) < sqrt(N)`\n  // Since part can be negative, we need to do this on point.\n  // TODO: verifyScalar function which consumes lambda\n  const [[a1, b1], [a2, b2]] = basis;\n  const c1 = divNearest(b2 * k, n);\n  const c2 = divNearest(-b1 * k, n);\n  // |k1|/|k2| is < sqrt(N), but can be negative.\n  // If we do `k1 mod N`, we'll get big scalar (`> sqrt(N)`): so, we do cheaper negation instead.\n  let k1 = k - c1 * a1 - c2 * a2;\n  let k2 = -c1 * b1 - c2 * b2;\n  const k1neg = k1 < _0n;\n  const k2neg = k2 < _0n;\n  if (k1neg) k1 = -k1;\n  if (k2neg) k2 = -k2;\n  // Double check that resulting scalar less than half bits of N: otherwise wNAF will fail.\n  // This should only happen on wrong basises. Also, math inside is too complex and I don't trust it.\n  const MAX_NUM = bitMask(Math.ceil(bitLen(n) / 2)) + _1n; // Half bits of N\n  if (k1 < _0n || k1 >= MAX_NUM || k2 < _0n || k2 >= MAX_NUM) {\n    throw new Error('splitScalar (endomorphism): failed, k=' + k);\n  }\n  return { k1neg, k1, k2neg, k2 };\n}\n\nexport type ECDSASigFormat = 'compact' | 'der';\nexport type Entropy = Hex | boolean;\nexport type SignOpts = Partial<{\n  lowS: boolean;\n  extraEntropy: Entropy;\n  prehash: boolean;\n  format: ECDSASigFormat | 'js';\n}>;\nexport type VerOpts = Partial<{\n  lowS: boolean;\n  prehash: boolean;\n  format: ECDSASigFormat | 'js' | undefined;\n}>;\n\nfunction validateSigVerOpts(opts: SignOpts | VerOpts) {\n  if (opts.lowS !== undefined) abool('lowS', opts.lowS);\n  if (opts.prehash !== undefined) abool('prehash', opts.prehash);\n}\n\n/** Instance methods for 3D XYZ projective points. */\nexport interface WeierstrassPoint<T> extends CurvePoint<T, WeierstrassPoint<T>> {\n  /** projective X coordinate. Different from affine x. */\n  readonly X: T;\n  /** projective Y coordinate. Different from affine y. */\n  readonly Y: T;\n  /** projective z coordinate */\n  readonly Z: T;\n  /** affine x coordinate. Different from projective X. */\n  get x(): T;\n  /** affine y coordinate. Different from projective Y. */\n  get y(): T;\n  /** Encodes point using IEEE P1363 (DER) encoding. First byte is 2/3/4. Default = isCompressed. */\n  toBytes(isCompressed?: boolean): Uint8Array;\n  toHex(isCompressed?: boolean): string;\n\n  /** @deprecated use .X */\n  readonly px: T;\n  /** @deprecated use .Y */\n  readonly py: T;\n  /** @deprecated use .Z */\n  readonly pz: T;\n  /** @deprecated use `toBytes` */\n  toRawBytes(isCompressed?: boolean): Uint8Array;\n  /** @deprecated use `multiplyUnsafe` */\n  multiplyAndAddUnsafe(\n    Q: WeierstrassPoint<T>,\n    a: bigint,\n    b: bigint\n  ): WeierstrassPoint<T> | undefined;\n  /** @deprecated use `p.y % 2n === 0n` */\n  hasEvenY(): boolean;\n  /** @deprecated use `p.precompute(windowSize)` */\n  _setWindowSize(windowSize: number): void;\n}\n\n/** Static methods for 3D XYZ projective points. */\nexport interface WeierstrassPointCons<T> extends CurvePointCons<T, WeierstrassPoint<T>> {\n  /** Does NOT validate if the point is valid. Use `.assertValidity()`. */\n  new (X: T, Y: T, Z: T): WeierstrassPoint<T>;\n  /** @deprecated use `Point.BASE.multiply(Point.Fn.fromBytes(privateKey))` */\n  fromPrivateKey(privateKey: PrivKey): WeierstrassPoint<T>;\n  /** @deprecated use `import { normalizeZ } from '@noble/curves/abstract/curve.js';` */\n  normalizeZ(points: WeierstrassPoint<T>[]): WeierstrassPoint<T>[];\n  /** @deprecated use `import { pippenger } from '@noble/curves/abstract/curve.js';` */\n  msm(points: WeierstrassPoint<T>[], scalars: bigint[]): WeierstrassPoint<T>;\n}\n\n/** @deprecated use WeierstrassPoint */\nexport type ProjPointType<T> = WeierstrassPoint<T>;\n/** @deprecated use WeierstrassPointCons */\nexport type ProjConstructor<T> = WeierstrassPointCons<T>;\n\n// TODO: remove\nexport type CurvePointsType<T> = BasicWCurve<T> & {\n  fromBytes?: (bytes: Uint8Array) => AffinePoint<T>;\n  toBytes?: (\n    c: WeierstrassPointCons<T>,\n    point: WeierstrassPoint<T>,\n    isCompressed: boolean\n  ) => Uint8Array;\n};\n\n// LegacyWeierstrassOpts\nexport type CurvePointsTypeWithLength<T> = Readonly<CurvePointsType<T> & Partial<NLength>>;\n\n// LegacyWeierstrass\nexport type CurvePointsRes<T> = {\n  Point: WeierstrassPointCons<T>;\n\n  /** @deprecated the property will be removed in next release */\n  CURVE: CurvePointsType<T>;\n  /** @deprecated use `Point` */\n  ProjectivePoint: WeierstrassPointCons<T>;\n  /** @deprecated use `Point.Fn.fromBytes(privateKey)` */\n  normPrivateKeyToScalar: (key: PrivKey) => bigint;\n  /** @deprecated */\n  weierstrassEquation: (x: T) => T;\n  /** @deprecated use `Point.Fn.isValidNot0(num)` */\n  isWithinCurveOrder: (num: bigint) => boolean;\n};\n\n// Aliases to legacy types\n// export type CurveType = LegacyECDSAOpts;\n// export type CurveFn = LegacyECDSA;\n// export type CurvePointsRes<T> = LegacyWeierstrass<T>;\n// export type CurvePointsType<T> = LegacyWeierstrassOpts<T>;\n// export type CurvePointsTypeWithLength<T> = LegacyWeierstrassOpts<T>;\n// export type BasicWCurve<T> = LegacyWeierstrassOpts<T>;\n\n/**\n * Weierstrass curve options.\n *\n * * p: prime characteristic (order) of finite field, in which arithmetics is done\n * * n: order of prime subgroup a.k.a total amount of valid curve points\n * * h: cofactor, usually 1. h*n is group order; n is subgroup order\n * * a: formula param, must be in field of p\n * * b: formula param, must be in field of p\n * * Gx: x coordinate of generator point a.k.a. base point\n * * Gy: y coordinate of generator point\n */\nexport type WeierstrassOpts<T> = Readonly<{\n  p: bigint;\n  n: bigint;\n  h: bigint;\n  a: T;\n  b: T;\n  Gx: T;\n  Gy: T;\n}>;\n\n// When a cofactor != 1, there can be an effective methods to:\n// 1. Determine whether a point is torsion-free\n// 2. Clear torsion component\n// wrapPrivateKey: bls12-381 requires mod(n) instead of rejecting keys >= n\nexport type WeierstrassExtraOpts<T> = Partial<{\n  Fp: IField<T>;\n  Fn: IField<bigint>;\n  allowInfinityPoint: boolean;\n  endo: EndomorphismOpts;\n  isTorsionFree: (c: WeierstrassPointCons<T>, point: WeierstrassPoint<T>) => boolean;\n  clearCofactor: (c: WeierstrassPointCons<T>, point: WeierstrassPoint<T>) => WeierstrassPoint<T>;\n  fromBytes: (bytes: Uint8Array) => AffinePoint<T>;\n  toBytes: (\n    c: WeierstrassPointCons<T>,\n    point: WeierstrassPoint<T>,\n    isCompressed: boolean\n  ) => Uint8Array;\n}>;\n\n/**\n * Options for ECDSA signatures over a Weierstrass curve.\n */\nexport type ECDSAOpts = Partial<{\n  lowS: boolean;\n  hmac: HmacFnSync;\n  randomBytes: (bytesLength?: number) => Uint8Array;\n  bits2int: (bytes: Uint8Array) => bigint;\n  bits2int_modN: (bytes: Uint8Array) => bigint;\n}>;\n\n/** ECDSA is only supported for prime fields, not Fp2 (extension fields). */\nexport interface ECDSA {\n  keygen: (seed?: Uint8Array) => { secretKey: Uint8Array; publicKey: Uint8Array };\n  getPublicKey: (secretKey: PrivKey, isCompressed?: boolean) => Uint8Array;\n  sign: (msgHash: Hex, secretKey: PrivKey, opts?: SignOpts) => ECDSASigRecovered;\n  verify: (signature: Hex | SignatureLike, msgHash: Hex, publicKey: Hex, opts?: VerOpts) => boolean;\n  getSharedSecret: (secretKeyA: PrivKey, publicKeyB: Hex, isCompressed?: boolean) => Uint8Array;\n  Point: WeierstrassPointCons<bigint>;\n  Signature: ECDSASignatureCons;\n  utils: {\n    isValidSecretKey: (secretKey: PrivKey) => boolean;\n    isValidPublicKey: (publicKey: Uint8Array, isCompressed?: boolean) => boolean;\n    randomSecretKey: (seed?: Uint8Array) => Uint8Array;\n\n    /** @deprecated use `randomSecretKey` */\n    randomPrivateKey: (seed?: Uint8Array) => Uint8Array;\n    /** @deprecated use `isValidSecretKey` */\n    isValidPrivateKey: (secretKey: PrivKey) => boolean;\n    /** @deprecated use `Point.Fn.fromBytes()` */\n    normPrivateKeyToScalar: (key: PrivKey) => bigint;\n    /** @deprecated use `point.precompute()` */\n    precompute: (windowSize?: number, point?: WeierstrassPoint<bigint>) => WeierstrassPoint<bigint>;\n  };\n  info: CurveInfo;\n}\nexport class DERErr extends Error {\n  constructor(m = '') {\n    super(m);\n  }\n}\nexport type IDER = {\n  // asn.1 DER encoding utils\n  Err: typeof DERErr;\n  // Basic building block is TLV (Tag-Length-Value)\n  _tlv: {\n    encode: (tag: number, data: string) => string;\n    // v - value, l - left bytes (unparsed)\n    decode(tag: number, data: Uint8Array): { v: Uint8Array; l: Uint8Array };\n  };\n  // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n  // since we always use positive integers here. It must always be empty:\n  // - add zero byte if exists\n  // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n  _int: {\n    encode(num: bigint): string;\n    decode(data: Uint8Array): bigint;\n  };\n  toSig(hex: string | Uint8Array): { r: bigint; s: bigint };\n  hexFromSig(sig: { r: bigint; s: bigint }): string;\n};\n/**\n * ASN.1 DER encoding utilities. ASN is very complex & fragile. Format:\n *\n *     [0x30 (SEQUENCE), bytelength, 0x02 (INTEGER), intLength, R, 0x02 (INTEGER), intLength, S]\n *\n * Docs: https://letsencrypt.org/docs/a-warm-welcome-to-asn1-and-der/, https://luca.ntop.org/Teaching/Appunti/asn1.html\n */\nexport const DER: IDER = {\n  // asn.1 DER encoding utils\n  Err: DERErr,\n  // Basic building block is TLV (Tag-Length-Value)\n  _tlv: {\n    encode: (tag: number, data: string): string => {\n      const { Err: E } = DER;\n      if (tag < 0 || tag > 256) throw new E('tlv.encode: wrong tag');\n      if (data.length & 1) throw new E('tlv.encode: unpadded data');\n      const dataLen = data.length / 2;\n      const len = numberToHexUnpadded(dataLen);\n      if ((len.length / 2) & 0b1000_0000) throw new E('tlv.encode: long form length too big');\n      // length of length with long form flag\n      const lenLen = dataLen > 127 ? numberToHexUnpadded((len.length / 2) | 0b1000_0000) : '';\n      const t = numberToHexUnpadded(tag);\n      return t + lenLen + len + data;\n    },\n    // v - value, l - left bytes (unparsed)\n    decode(tag: number, data: Uint8Array): { v: Uint8Array; l: Uint8Array } {\n      const { Err: E } = DER;\n      let pos = 0;\n      if (tag < 0 || tag > 256) throw new E('tlv.encode: wrong tag');\n      if (data.length < 2 || data[pos++] !== tag) throw new E('tlv.decode: wrong tlv');\n      const first = data[pos++];\n      const isLong = !!(first & 0b1000_0000); // First bit of first length byte is flag for short/long form\n      let length = 0;\n      if (!isLong) length = first;\n      else {\n        // Long form: [longFlag(1bit), lengthLength(7bit), length (BE)]\n        const lenLen = first & 0b0111_1111;\n        if (!lenLen) throw new E('tlv.decode(long): indefinite length not supported');\n        if (lenLen > 4) throw new E('tlv.decode(long): byte length is too big'); // this will overflow u32 in js\n        const lengthBytes = data.subarray(pos, pos + lenLen);\n        if (lengthBytes.length !== lenLen) throw new E('tlv.decode: length bytes not complete');\n        if (lengthBytes[0] === 0) throw new E('tlv.decode(long): zero leftmost byte');\n        for (const b of lengthBytes) length = (length << 8) | b;\n        pos += lenLen;\n        if (length < 128) throw new E('tlv.decode(long): not minimal encoding');\n      }\n      const v = data.subarray(pos, pos + length);\n      if (v.length !== length) throw new E('tlv.decode: wrong value length');\n      return { v, l: data.subarray(pos + length) };\n    },\n  },\n  // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n  // since we always use positive integers here. It must always be empty:\n  // - add zero byte if exists\n  // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n  _int: {\n    encode(num: bigint): string {\n      const { Err: E } = DER;\n      if (num < _0n) throw new E('integer: negative integers are not allowed');\n      let hex = numberToHexUnpadded(num);\n      // Pad with zero byte if negative flag is present\n      if (Number.parseInt(hex[0], 16) & 0b1000) hex = '00' + hex;\n      if (hex.length & 1) throw new E('unexpected DER parsing assertion: unpadded hex');\n      return hex;\n    },\n    decode(data: Uint8Array): bigint {\n      const { Err: E } = DER;\n      if (data[0] & 0b1000_0000) throw new E('invalid signature integer: negative');\n      if (data[0] === 0x00 && !(data[1] & 0b1000_0000))\n        throw new E('invalid signature integer: unnecessary leading zero');\n      return bytesToNumberBE(data);\n    },\n  },\n  toSig(hex: string | Uint8Array): { r: bigint; s: bigint } {\n    // parse DER signature\n    const { Err: E, _int: int, _tlv: tlv } = DER;\n    const data = ensureBytes('signature', hex);\n    const { v: seqBytes, l: seqLeftBytes } = tlv.decode(0x30, data);\n    if (seqLeftBytes.length) throw new E('invalid signature: left bytes after parsing');\n    const { v: rBytes, l: rLeftBytes } = tlv.decode(0x02, seqBytes);\n    const { v: sBytes, l: sLeftBytes } = tlv.decode(0x02, rLeftBytes);\n    if (sLeftBytes.length) throw new E('invalid signature: left bytes after parsing');\n    return { r: int.decode(rBytes), s: int.decode(sBytes) };\n  },\n  hexFromSig(sig: { r: bigint; s: bigint }): string {\n    const { _tlv: tlv, _int: int } = DER;\n    const rs = tlv.encode(0x02, int.encode(sig.r));\n    const ss = tlv.encode(0x02, int.encode(sig.s));\n    const seq = rs + ss;\n    return tlv.encode(0x30, seq);\n  },\n};\n\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);\n\n// TODO: remove\nexport function _legacyHelperEquat<T>(Fp: IField<T>, a: T, b: T): (x: T) => T {\n  /**\n   * y² = x³ + ax + b: Short weierstrass curve formula. Takes x, returns y².\n   * @returns y²\n   */\n  function weierstrassEquation(x: T): T {\n    const x2 = Fp.sqr(x); // x * x\n    const x3 = Fp.mul(x2, x); // x² * x\n    return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x³ + a * x + b\n  }\n  return weierstrassEquation;\n}\nexport function _normFnElement(Fn: IField<bigint>, key: PrivKey): bigint {\n  const { BYTES: expected } = Fn;\n  let num: bigint;\n  if (typeof key === 'bigint') {\n    num = key;\n  } else {\n    let bytes = ensureBytes('private key', key);\n    try {\n      num = Fn.fromBytes(bytes);\n    } catch (error) {\n      throw new Error(`invalid private key: expected ui8a of size ${expected}, got ${typeof key}`);\n    }\n  }\n  if (!Fn.isValidNot0(num)) throw new Error('invalid private key: out of range [1..N-1]');\n  return num;\n}\n\nexport function weierstrassN<T>(\n  CURVE: WeierstrassOpts<T>,\n  curveOpts: WeierstrassExtraOpts<T> = {}\n): WeierstrassPointCons<T> {\n  const { Fp, Fn } = _createCurveFields('weierstrass', CURVE, curveOpts);\n  const { h: cofactor, n: CURVE_ORDER } = CURVE;\n  _validateObject(\n    curveOpts,\n    {},\n    {\n      allowInfinityPoint: 'boolean',\n      clearCofactor: 'function',\n      isTorsionFree: 'function',\n      fromBytes: 'function',\n      toBytes: 'function',\n      endo: 'object',\n      wrapPrivateKey: 'boolean',\n    }\n  );\n\n  const { endo } = curveOpts;\n  if (endo) {\n    // validateObject(endo, { beta: 'bigint', splitScalar: 'function' });\n    if (!Fp.is0(CURVE.a) || typeof endo.beta !== 'bigint' || !Array.isArray(endo.basises)) {\n      throw new Error('invalid endo: expected \"beta\": bigint and \"basises\": array');\n    }\n  }\n\n  function assertCompressionIsSupported() {\n    if (!Fp.isOdd) throw new Error('compression is not supported: Field does not have .isOdd()');\n  }\n\n  // Implements IEEE P1363 point encoding\n  function pointToBytes(\n    _c: WeierstrassPointCons<T>,\n    point: WeierstrassPoint<T>,\n    isCompressed: boolean\n  ): Uint8Array {\n    const { x, y } = point.toAffine();\n    const bx = Fp.toBytes(x);\n    abool('isCompressed', isCompressed);\n    if (isCompressed) {\n      assertCompressionIsSupported();\n      const hasEvenY = !Fp.isOdd!(y);\n      return concatBytes(pprefix(hasEvenY), bx);\n    } else {\n      return concatBytes(Uint8Array.of(0x04), bx, Fp.toBytes(y));\n    }\n  }\n  function pointFromBytes(bytes: Uint8Array) {\n    abytes(bytes);\n    const L = Fp.BYTES;\n    const LC = L + 1; // length compressed, e.g. 33 for 32-byte field\n    const LU = 2 * L + 1; // length uncompressed, e.g. 65 for 32-byte field\n    const length = bytes.length;\n    const head = bytes[0];\n    const tail = bytes.subarray(1);\n    // No actual validation is done here: use .assertValidity()\n    if (length === LC && (head === 0x02 || head === 0x03)) {\n      const x = Fp.fromBytes(tail);\n      if (!Fp.isValid(x)) throw new Error('bad point: is not on curve, wrong x');\n      const y2 = weierstrassEquation(x); // y² = x³ + ax + b\n      let y: T;\n      try {\n        y = Fp.sqrt(y2); // y = y² ^ (p+1)/4\n      } catch (sqrtError) {\n        const err = sqrtError instanceof Error ? ': ' + sqrtError.message : '';\n        throw new Error('bad point: is not on curve, sqrt error' + err);\n      }\n      assertCompressionIsSupported();\n      const isYOdd = Fp.isOdd!(y); // (y & _1n) === _1n;\n      const isHeadOdd = (head & 1) === 1; // ECDSA-specific\n      if (isHeadOdd !== isYOdd) y = Fp.neg(y);\n      return { x, y };\n    } else if (length === LU && head === 0x04) {\n      // TODO: more checks\n      const x = Fp.fromBytes(tail.subarray(L * 0, L * 1));\n      const y = Fp.fromBytes(tail.subarray(L * 1, L * 2));\n      if (!isValidXY(x, y)) throw new Error('bad point: is not on curve');\n      return { x, y };\n    } else {\n      throw new Error(\n        `bad point: got length ${length}, expected compressed=${LC} or uncompressed=${LU}`\n      );\n    }\n  }\n\n  const toBytes = curveOpts.toBytes || pointToBytes;\n  const fromBytes = curveOpts.fromBytes || pointFromBytes;\n  const weierstrassEquation = _legacyHelperEquat(Fp, CURVE.a, CURVE.b);\n\n  // TODO: move top-level\n  /** Checks whether equation holds for given x, y: y² == x³ + ax + b */\n  function isValidXY(x: T, y: T): boolean {\n    const left = Fp.sqr(y); // y²\n    const right = weierstrassEquation(x); // x³ + ax + b\n    return Fp.eql(left, right);\n  }\n\n  // Validate whether the passed curve params are valid.\n  // Test 1: equation y² = x³ + ax + b should work for generator point.\n  if (!isValidXY(CURVE.Gx, CURVE.Gy)) throw new Error('bad curve params: generator point');\n\n  // Test 2: discriminant Δ part should be non-zero: 4a³ + 27b² != 0.\n  // Guarantees curve is genus-1, smooth (non-singular).\n  const _4a3 = Fp.mul(Fp.pow(CURVE.a, _3n), _4n);\n  const _27b2 = Fp.mul(Fp.sqr(CURVE.b), BigInt(27));\n  if (Fp.is0(Fp.add(_4a3, _27b2))) throw new Error('bad curve params: a or b');\n\n  /** Asserts coordinate is valid: 0 <= n < Fp.ORDER. */\n  function acoord(title: string, n: T, banZero = false) {\n    if (!Fp.isValid(n) || (banZero && Fp.is0(n))) throw new Error(`bad point coordinate ${title}`);\n    return n;\n  }\n\n  function aprjpoint(other: unknown) {\n    if (!(other instanceof Point)) throw new Error('ProjectivePoint expected');\n  }\n\n  function splitEndoScalarN(k: bigint) {\n    if (!endo || !endo.basises) throw new Error('no endo');\n    return _splitEndoScalar(k, endo.basises, Fn.ORDER);\n  }\n\n  // Memoized toAffine / validity check. They are heavy. Points are immutable.\n\n  // Converts Projective point to affine (x, y) coordinates.\n  // Can accept precomputed Z^-1 - for example, from invertBatch.\n  // (X, Y, Z) ∋ (x=X/Z, y=Y/Z)\n  const toAffineMemo = memoized((p: Point, iz?: T): AffinePoint<T> => {\n    const { X, Y, Z } = p;\n    // Fast-path for normalized points\n    if (Fp.eql(Z, Fp.ONE)) return { x: X, y: Y };\n    const is0 = p.is0();\n    // If invZ was 0, we return zero point. However we still want to execute\n    // all operations, so we replace invZ with a random number, 1.\n    if (iz == null) iz = is0 ? Fp.ONE : Fp.inv(Z);\n    const x = Fp.mul(X, iz);\n    const y = Fp.mul(Y, iz);\n    const zz = Fp.mul(Z, iz);\n    if (is0) return { x: Fp.ZERO, y: Fp.ZERO };\n    if (!Fp.eql(zz, Fp.ONE)) throw new Error('invZ was invalid');\n    return { x, y };\n  });\n  // NOTE: on exception this will crash 'cached' and no value will be set.\n  // Otherwise true will be return\n  const assertValidMemo = memoized((p: Point) => {\n    if (p.is0()) {\n      // (0, 1, 0) aka ZERO is invalid in most contexts.\n      // In BLS, ZERO can be serialized, so we allow it.\n      // (0, 0, 0) is invalid representation of ZERO.\n      if (curveOpts.allowInfinityPoint && !Fp.is0(p.Y)) return;\n      throw new Error('bad point: ZERO');\n    }\n    // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\n    const { x, y } = p.toAffine();\n    if (!Fp.isValid(x) || !Fp.isValid(y)) throw new Error('bad point: x or y not field elements');\n    if (!isValidXY(x, y)) throw new Error('bad point: equation left != right');\n    if (!p.isTorsionFree()) throw new Error('bad point: not in prime-order subgroup');\n    return true;\n  });\n\n  function finishEndo(\n    endoBeta: EndomorphismOpts['beta'],\n    k1p: Point,\n    k2p: Point,\n    k1neg: boolean,\n    k2neg: boolean\n  ) {\n    k2p = new Point(Fp.mul(k2p.X, endoBeta), k2p.Y, k2p.Z);\n    k1p = negateCt(k1neg, k1p);\n    k2p = negateCt(k2neg, k2p);\n    return k1p.add(k2p);\n  }\n\n  /**\n   * Projective Point works in 3d / projective (homogeneous) coordinates:(X, Y, Z) ∋ (x=X/Z, y=Y/Z).\n   * Default Point works in 2d / affine coordinates: (x, y).\n   * We're doing calculations in projective, because its operations don't require costly inversion.\n   */\n  class Point implements WeierstrassPoint<T> {\n    // base / generator point\n    static readonly BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\n    // zero / infinity / identity point\n    static readonly ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO); // 0, 1, 0\n    // fields\n    static readonly Fp = Fp;\n    static readonly Fn = Fn;\n\n    readonly X: T;\n    readonly Y: T;\n    readonly Z: T;\n\n    /** Does NOT validate if the point is valid. Use `.assertValidity()`. */\n    constructor(X: T, Y: T, Z: T) {\n      this.X = acoord('x', X);\n      this.Y = acoord('y', Y, true);\n      this.Z = acoord('z', Z);\n      Object.freeze(this);\n    }\n\n    /** Does NOT validate if the point is valid. Use `.assertValidity()`. */\n    static fromAffine(p: AffinePoint<T>): Point {\n      const { x, y } = p || {};\n      if (!p || !Fp.isValid(x) || !Fp.isValid(y)) throw new Error('invalid affine point');\n      if (p instanceof Point) throw new Error('projective point not allowed');\n      // (0, 0) would've produced (0, 0, 1) - instead, we need (0, 1, 0)\n      if (Fp.is0(x) && Fp.is0(y)) return Point.ZERO;\n      return new Point(x, y, Fp.ONE);\n    }\n\n    get x(): T {\n      return this.toAffine().x;\n    }\n    get y(): T {\n      return this.toAffine().y;\n    }\n\n    // TODO: remove\n    get px(): T {\n      return this.X;\n    }\n    get py(): T {\n      return this.X;\n    }\n    get pz(): T {\n      return this.Z;\n    }\n    static normalizeZ(points: Point[]): Point[] {\n      return normalizeZ(Point, points);\n    }\n\n    static fromBytes(bytes: Uint8Array): Point {\n      abytes(bytes);\n      return Point.fromHex(bytes);\n    }\n\n    /** Converts hash string or Uint8Array to Point. */\n    static fromHex(hex: Hex): Point {\n      const P = Point.fromAffine(fromBytes(ensureBytes('pointHex', hex)));\n      P.assertValidity();\n      return P;\n    }\n\n    /** Multiplies generator point by privateKey. */\n    static fromPrivateKey(privateKey: PrivKey) {\n      return Point.BASE.multiply(_normFnElement(Fn, privateKey));\n    }\n\n    // TODO: remove\n    static msm(points: Point[], scalars: bigint[]): Point {\n      return pippenger(Point, Fn, points, scalars);\n    }\n    _setWindowSize(windowSize: number) {\n      this.precompute(windowSize);\n    }\n\n    /**\n     *\n     * @param windowSize\n     * @param isLazy true will defer table computation until the first multiplication\n     * @returns\n     */\n    precompute(windowSize: number = 8, isLazy = true): Point {\n      wnaf.createCache(this, windowSize);\n      if (!isLazy) this.multiply(_3n); // random number\n      return this;\n    }\n\n    // TODO: return `this`\n    /** A point on curve is valid if it conforms to equation. */\n    assertValidity(): void {\n      assertValidMemo(this);\n    }\n\n    hasEvenY(): boolean {\n      const { y } = this.toAffine();\n      if (!Fp.isOdd) throw new Error(\"Field doesn't support isOdd\");\n      return !Fp.isOdd(y);\n    }\n\n    /** Compare one point to another. */\n    equals(other: Point): boolean {\n      aprjpoint(other);\n      const { X: X1, Y: Y1, Z: Z1 } = this;\n      const { X: X2, Y: Y2, Z: Z2 } = other;\n      const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\n      const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\n      return U1 && U2;\n    }\n\n    /** Flips point to one corresponding to (x, -y) in Affine coordinates. */\n    negate(): Point {\n      return new Point(this.X, Fp.neg(this.Y), this.Z);\n    }\n\n    // Renes-Costello-Batina exception-free doubling formula.\n    // There is 30% faster Jacobian formula, but it is not complete.\n    // https://eprint.iacr.org/2015/1060, algorithm 3\n    // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\n    double() {\n      const { a, b } = CURVE;\n      const b3 = Fp.mul(b, _3n);\n      const { X: X1, Y: Y1, Z: Z1 } = this;\n      let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n      let t0 = Fp.mul(X1, X1); // step 1\n      let t1 = Fp.mul(Y1, Y1);\n      let t2 = Fp.mul(Z1, Z1);\n      let t3 = Fp.mul(X1, Y1);\n      t3 = Fp.add(t3, t3); // step 5\n      Z3 = Fp.mul(X1, Z1);\n      Z3 = Fp.add(Z3, Z3);\n      X3 = Fp.mul(a, Z3);\n      Y3 = Fp.mul(b3, t2);\n      Y3 = Fp.add(X3, Y3); // step 10\n      X3 = Fp.sub(t1, Y3);\n      Y3 = Fp.add(t1, Y3);\n      Y3 = Fp.mul(X3, Y3);\n      X3 = Fp.mul(t3, X3);\n      Z3 = Fp.mul(b3, Z3); // step 15\n      t2 = Fp.mul(a, t2);\n      t3 = Fp.sub(t0, t2);\n      t3 = Fp.mul(a, t3);\n      t3 = Fp.add(t3, Z3);\n      Z3 = Fp.add(t0, t0); // step 20\n      t0 = Fp.add(Z3, t0);\n      t0 = Fp.add(t0, t2);\n      t0 = Fp.mul(t0, t3);\n      Y3 = Fp.add(Y3, t0);\n      t2 = Fp.mul(Y1, Z1); // step 25\n      t2 = Fp.add(t2, t2);\n      t0 = Fp.mul(t2, t3);\n      X3 = Fp.sub(X3, t0);\n      Z3 = Fp.mul(t2, t1);\n      Z3 = Fp.add(Z3, Z3); // step 30\n      Z3 = Fp.add(Z3, Z3);\n      return new Point(X3, Y3, Z3);\n    }\n\n    // Renes-Costello-Batina exception-free addition formula.\n    // There is 30% faster Jacobian formula, but it is not complete.\n    // https://eprint.iacr.org/2015/1060, algorithm 1\n    // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\n    add(other: Point): Point {\n      aprjpoint(other);\n      const { X: X1, Y: Y1, Z: Z1 } = this;\n      const { X: X2, Y: Y2, Z: Z2 } = other;\n      let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n      const a = CURVE.a;\n      const b3 = Fp.mul(CURVE.b, _3n);\n      let t0 = Fp.mul(X1, X2); // step 1\n      let t1 = Fp.mul(Y1, Y2);\n      let t2 = Fp.mul(Z1, Z2);\n      let t3 = Fp.add(X1, Y1);\n      let t4 = Fp.add(X2, Y2); // step 5\n      t3 = Fp.mul(t3, t4);\n      t4 = Fp.add(t0, t1);\n      t3 = Fp.sub(t3, t4);\n      t4 = Fp.add(X1, Z1);\n      let t5 = Fp.add(X2, Z2); // step 10\n      t4 = Fp.mul(t4, t5);\n      t5 = Fp.add(t0, t2);\n      t4 = Fp.sub(t4, t5);\n      t5 = Fp.add(Y1, Z1);\n      X3 = Fp.add(Y2, Z2); // step 15\n      t5 = Fp.mul(t5, X3);\n      X3 = Fp.add(t1, t2);\n      t5 = Fp.sub(t5, X3);\n      Z3 = Fp.mul(a, t4);\n      X3 = Fp.mul(b3, t2); // step 20\n      Z3 = Fp.add(X3, Z3);\n      X3 = Fp.sub(t1, Z3);\n      Z3 = Fp.add(t1, Z3);\n      Y3 = Fp.mul(X3, Z3);\n      t1 = Fp.add(t0, t0); // step 25\n      t1 = Fp.add(t1, t0);\n      t2 = Fp.mul(a, t2);\n      t4 = Fp.mul(b3, t4);\n      t1 = Fp.add(t1, t2);\n      t2 = Fp.sub(t0, t2); // step 30\n      t2 = Fp.mul(a, t2);\n      t4 = Fp.add(t4, t2);\n      t0 = Fp.mul(t1, t4);\n      Y3 = Fp.add(Y3, t0);\n      t0 = Fp.mul(t5, t4); // step 35\n      X3 = Fp.mul(t3, X3);\n      X3 = Fp.sub(X3, t0);\n      t0 = Fp.mul(t3, t1);\n      Z3 = Fp.mul(t5, Z3);\n      Z3 = Fp.add(Z3, t0); // step 40\n      return new Point(X3, Y3, Z3);\n    }\n\n    subtract(other: Point) {\n      return this.add(other.negate());\n    }\n\n    is0(): boolean {\n      return this.equals(Point.ZERO);\n    }\n\n    /**\n     * Constant time multiplication.\n     * Uses wNAF method. Windowed method may be 10% faster,\n     * but takes 2x longer to generate and consumes 2x memory.\n     * Uses precomputes when available.\n     * Uses endomorphism for Koblitz curves.\n     * @param scalar by which the point would be multiplied\n     * @returns New point\n     */\n    multiply(scalar: bigint): Point {\n      const { endo } = curveOpts;\n      if (!Fn.isValidNot0(scalar)) throw new Error('invalid scalar: out of range'); // 0 is invalid\n      let point: Point, fake: Point; // Fake point is used to const-time mult\n      const mul = (n: bigint) => wnaf.cached(this, n, (p) => normalizeZ(Point, p));\n      /** See docs for {@link EndomorphismOpts} */\n      if (endo) {\n        const { k1neg, k1, k2neg, k2 } = splitEndoScalarN(scalar);\n        const { p: k1p, f: k1f } = mul(k1);\n        const { p: k2p, f: k2f } = mul(k2);\n        fake = k1f.add(k2f);\n        point = finishEndo(endo.beta, k1p, k2p, k1neg, k2neg);\n      } else {\n        const { p, f } = mul(scalar);\n        point = p;\n        fake = f;\n      }\n      // Normalize `z` for both points, but return only real one\n      return normalizeZ(Point, [point, fake])[0];\n    }\n\n    /**\n     * Non-constant-time multiplication. Uses double-and-add algorithm.\n     * It's faster, but should only be used when you don't care about\n     * an exposed secret key e.g. sig verification, which works over *public* keys.\n     */\n    multiplyUnsafe(sc: bigint): Point {\n      const { endo } = curveOpts;\n      const p = this;\n      if (!Fn.isValid(sc)) throw new Error('invalid scalar: out of range'); // 0 is valid\n      if (sc === _0n || p.is0()) return Point.ZERO;\n      if (sc === _1n) return p; // fast-path\n      if (wnaf.hasCache(this)) return this.multiply(sc);\n      if (endo) {\n        const { k1neg, k1, k2neg, k2 } = splitEndoScalarN(sc);\n        const { p1, p2 } = mulEndoUnsafe(Point, p, k1, k2); // 30% faster vs wnaf.unsafe\n        return finishEndo(endo.beta, p1, p2, k1neg, k2neg);\n      } else {\n        return wnaf.unsafe(p, sc);\n      }\n    }\n\n    multiplyAndAddUnsafe(Q: Point, a: bigint, b: bigint): Point | undefined {\n      const sum = this.multiplyUnsafe(a).add(Q.multiplyUnsafe(b));\n      return sum.is0() ? undefined : sum;\n    }\n\n    /**\n     * Converts Projective point to affine (x, y) coordinates.\n     * @param invertedZ Z^-1 (inverted zero) - optional, precomputation is useful for invertBatch\n     */\n    toAffine(invertedZ?: T): AffinePoint<T> {\n      return toAffineMemo(this, invertedZ);\n    }\n\n    /**\n     * Checks whether Point is free of torsion elements (is in prime subgroup).\n     * Always torsion-free for cofactor=1 curves.\n     */\n    isTorsionFree(): boolean {\n      const { isTorsionFree } = curveOpts;\n      if (cofactor === _1n) return true;\n      if (isTorsionFree) return isTorsionFree(Point, this);\n      return wnaf.unsafe(this, CURVE_ORDER).is0();\n    }\n\n    clearCofactor(): Point {\n      const { clearCofactor } = curveOpts;\n      if (cofactor === _1n) return this; // Fast-path\n      if (clearCofactor) return clearCofactor(Point, this) as Point;\n      return this.multiplyUnsafe(cofactor);\n    }\n\n    isSmallOrder(): boolean {\n      // can we use this.clearCofactor()?\n      return this.multiplyUnsafe(cofactor).is0();\n    }\n\n    toBytes(isCompressed = true): Uint8Array {\n      abool('isCompressed', isCompressed);\n      this.assertValidity();\n      return toBytes(Point, this, isCompressed);\n    }\n\n    /** @deprecated use `toBytes` */\n    toRawBytes(isCompressed = true): Uint8Array {\n      return this.toBytes(isCompressed);\n    }\n\n    toHex(isCompressed = true): string {\n      return bytesToHex(this.toBytes(isCompressed));\n    }\n\n    toString() {\n      return `<Point ${this.is0() ? 'ZERO' : this.toHex()}>`;\n    }\n  }\n  const bits = Fn.BITS;\n  const wnaf = new wNAF(Point, curveOpts.endo ? Math.ceil(bits / 2) : bits);\n  return Point;\n}\n\n// _legacyWeierstrass\n// TODO: remove\n/** @deprecated use `weierstrass` in newer releases */\nexport function weierstrassPoints<T>(c: CurvePointsTypeWithLength<T>): CurvePointsRes<T> {\n  const { CURVE, curveOpts } = _weierstrass_legacy_opts_to_new(c);\n  const Point = weierstrassN(CURVE, curveOpts);\n  return _weierstrass_new_output_to_legacy(c, Point);\n}\n\n// Instance\nexport interface ECDSASignature {\n  readonly r: bigint;\n  readonly s: bigint;\n  readonly recovery?: number;\n  addRecoveryBit(recovery: number): ECDSASigRecovered;\n  hasHighS(): boolean;\n  normalizeS(): ECDSASignature;\n  recoverPublicKey(msgHash: Hex): WeierstrassPoint<bigint>;\n  toBytes(format?: string): Uint8Array;\n  toHex(format?: string): string;\n\n  /** @deprecated */\n  assertValidity(): void;\n  /** @deprecated use `.toBytes('compact')` */\n  toCompactRawBytes(): Uint8Array;\n  /** @deprecated use `.toBytes('compact')` */\n  toCompactHex(): string;\n  /** @deprecated use `.toBytes('der')` */\n  toDERRawBytes(): Uint8Array;\n  /** @deprecated use `.toBytes('der')` */\n  toDERHex(): string;\n}\nexport type SignatureType = ECDSASignature;\nexport type ECDSASigRecovered = ECDSASignature & {\n  readonly recovery: number;\n};\nexport type RecoveredSignatureType = ECDSASigRecovered;\n// Static methods\nexport type ECDSASignatureCons = {\n  new (r: bigint, s: bigint, recovery?: number): ECDSASignature;\n  fromBytes(bytes: Uint8Array, format?: ECDSASigFormat): ECDSASignature;\n  fromHex(hex: string, format?: ECDSASigFormat): ECDSASignature;\n\n  /** @deprecated use `.fromBytes(bytes, 'compact')` */\n  fromCompact(hex: Hex): ECDSASignature;\n  /** @deprecated use `.fromBytes(bytes, 'der')` */\n  fromDER(hex: Hex): ECDSASignature;\n};\nexport type SignatureLike = { r: bigint; s: bigint };\n// TODO: remove\nexport type PubKey = Hex | WeierstrassPoint<bigint>;\n\n// TODO: remove\nexport type CurveType = BasicWCurve<bigint> & {\n  hash: CHash; // CHash not FHash because we need outputLen for DRBG\n  hmac?: HmacFnSync;\n  randomBytes?: (bytesLength?: number) => Uint8Array;\n  lowS?: boolean;\n  bits2int?: (bytes: Uint8Array) => bigint;\n  bits2int_modN?: (bytes: Uint8Array) => bigint;\n};\n\n// Points start with byte 0x02 when y is even; otherwise 0x03\nfunction pprefix(hasEvenY: boolean): Uint8Array {\n  return Uint8Array.of(hasEvenY ? 0x02 : 0x03);\n}\n\n// TODO: remove\nexport type CurveFn = {\n  /** @deprecated the property will be removed in next release */\n  CURVE: CurvePointsType<bigint>;\n  keygen: ECDSA['keygen'];\n  getPublicKey: ECDSA['getPublicKey'];\n  getSharedSecret: ECDSA['getSharedSecret'];\n  sign: ECDSA['sign'];\n  verify: ECDSA['verify'];\n  Point: WeierstrassPointCons<bigint>;\n  /** @deprecated use `Point` */\n  ProjectivePoint: WeierstrassPointCons<bigint>;\n  Signature: ECDSASignatureCons;\n  utils: ECDSA['utils'];\n  info: CurveInfo;\n};\n\n/**\n * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.\n * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.\n * b = True and y = sqrt(u / v) if (u / v) is square in F, and\n * b = False and y = sqrt(Z * (u / v)) otherwise.\n * @param Fp\n * @param Z\n * @returns\n */\nexport function SWUFpSqrtRatio<T>(\n  Fp: IField<T>,\n  Z: T\n): (u: T, v: T) => { isValid: boolean; value: T } {\n  // Generic implementation\n  const q = Fp.ORDER;\n  let l = _0n;\n  for (let o = q - _1n; o % _2n === _0n; o /= _2n) l += _1n;\n  const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\n  // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.\n  // 2n ** c1 == 2n << (c1-1)\n  const _2n_pow_c1_1 = _2n << (c1 - _1n - _1n);\n  const _2n_pow_c1 = _2n_pow_c1_1 * _2n;\n  const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic\n  const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\n  const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\n  const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic\n  const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\n  const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\n  let sqrtRatio = (u: T, v: T): { isValid: boolean; value: T } => {\n    let tv1 = c6; // 1. tv1 = c6\n    let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\n    let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\n    tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\n    let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\n    tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\n    tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\n    tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\n    tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\n    let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\n    tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\n    let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\n    tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\n    tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\n    tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\n    tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\n    // 17. for i in (c1, c1 - 1, ..., 2):\n    for (let i = c1; i > _1n; i--) {\n      let tv5 = i - _2n; // 18.    tv5 = i - 2\n      tv5 = _2n << (tv5 - _1n); // 19.    tv5 = 2^tv5\n      let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5\n      const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\n      tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\n      tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\n      tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\n      tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\n      tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\n    }\n    return { isValid: isQR, value: tv3 };\n  };\n  if (Fp.ORDER % _4n === _3n) {\n    // sqrt_ratio_3mod4(u, v)\n    const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\n    const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\n    sqrtRatio = (u: T, v: T) => {\n      let tv1 = Fp.sqr(v); // 1. tv1 = v^2\n      const tv2 = Fp.mul(u, v); // 2. tv2 = u * v\n      tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\n      let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1\n      y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\n      const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2\n      const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\n      const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\n      let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\n      return { isValid: isQR, value: y }; // 11. return (isQR, y) isQR ? y : y*c2\n    };\n  }\n  // No curves uses that\n  // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\n  return sqrtRatio;\n}\n/**\n * Simplified Shallue-van de Woestijne-Ulas Method\n * https://www.rfc-editor.org/rfc/rfc9380#section-6.6.2\n */\nexport function mapToCurveSimpleSWU<T>(\n  Fp: IField<T>,\n  opts: {\n    A: T;\n    B: T;\n    Z: T;\n  }\n): (u: T) => { x: T; y: T } {\n  validateField(Fp);\n  const { A, B, Z } = opts;\n  if (!Fp.isValid(A) || !Fp.isValid(B) || !Fp.isValid(Z))\n    throw new Error('mapToCurveSimpleSWU: invalid opts');\n  const sqrtRatio = SWUFpSqrtRatio(Fp, Z);\n  if (!Fp.isOdd) throw new Error('Field does not have .isOdd()');\n  // Input: u, an element of F.\n  // Output: (x, y), a point on E.\n  return (u: T): { x: T; y: T } => {\n    // prettier-ignore\n    let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\n    tv1 = Fp.sqr(u); // 1.  tv1 = u^2\n    tv1 = Fp.mul(tv1, Z); // 2.  tv1 = Z * tv1\n    tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\n    tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\n    tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\n    tv3 = Fp.mul(tv3, B); // 6.  tv3 = B * tv3\n    tv4 = Fp.cmov(Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\n    tv4 = Fp.mul(tv4, A); // 8.  tv4 = A * tv4\n    tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\n    tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\n    tv5 = Fp.mul(tv6, A); // 11. tv5 = A * tv6\n    tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\n    tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\n    tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\n    tv5 = Fp.mul(tv6, B); // 15. tv5 = B * tv6\n    tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\n    x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\n    const { isValid, value } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\n    y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\n    y = Fp.mul(y, value); // 20.   y = y * y1\n    x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\n    y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\n    const e1 = Fp.isOdd!(u) === Fp.isOdd!(y); // 23.  e1 = sgn0(u) == sgn0(y)\n    y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\n    const tv4_inv = FpInvertBatch(Fp, [tv4], true)[0];\n    x = Fp.mul(x, tv4_inv); // 25.   x = x / tv4\n    return { x, y };\n  };\n}\n\n/**\n * Creates ECDSA for given elliptic curve Point and hash function.\n */\nexport function ecdsa(\n  Point: WeierstrassPointCons<bigint>,\n  hash: CHash,\n  ecdsaOpts: ECDSAOpts = {}\n): ECDSA {\n  ahash(hash);\n  _validateObject(\n    ecdsaOpts,\n    {},\n    {\n      hmac: 'function',\n      lowS: 'boolean',\n      randomBytes: 'function',\n      bits2int: 'function',\n      bits2int_modN: 'function',\n    }\n  );\n\n  const randomBytes_ = ecdsaOpts.randomBytes || randomBytes;\n  const hmac_: HmacFnSync =\n    ecdsaOpts.hmac ||\n    (((key, ...msgs) => hmac(hash, key, concatBytes(...msgs))) satisfies HmacFnSync);\n\n  const { Fp, Fn } = Point;\n  const { ORDER: CURVE_ORDER, BITS: fnBits } = Fn;\n\n  const seedLen = getMinHashLength(CURVE_ORDER);\n  const lengths = {\n    secret: Fn.BYTES,\n    public: 1 + Fp.BYTES,\n    publicUncompressed: 1 + 2 * Fp.BYTES,\n    signature: 2 * Fn.BYTES,\n    seed: seedLen,\n  };\n\n  function isBiggerThanHalfOrder(number: bigint) {\n    const HALF = CURVE_ORDER >> _1n;\n    return number > HALF;\n  }\n\n  function normalizeS(s: bigint) {\n    return isBiggerThanHalfOrder(s) ? Fn.neg(s) : s;\n  }\n  function aValidRS(title: string, num: bigint) {\n    if (!Fn.isValidNot0(num))\n      throw new Error(`invalid signature ${title}: out of range 1..CURVE.n`);\n  }\n\n  /**\n   * ECDSA signature with its (r, s) properties. Supports DER & compact representations.\n   */\n  class Signature implements ECDSASignature {\n    readonly r: bigint;\n    readonly s: bigint;\n    readonly recovery?: number;\n    constructor(r: bigint, s: bigint, recovery?: number) {\n      aValidRS('r', r); // r in [1..N-1]\n      aValidRS('s', s); // s in [1..N-1]\n      this.r = r;\n      this.s = s;\n      if (recovery != null) this.recovery = recovery;\n      Object.freeze(this);\n    }\n\n    static fromBytes(bytes: Uint8Array, format: ECDSASigFormat = 'compact') {\n      if (format === 'compact') {\n        const L = Fn.BYTES;\n        abytes(bytes, L * 2);\n        const r = bytes.subarray(0, L);\n        const s = bytes.subarray(L, L * 2);\n        return new Signature(Fn.fromBytes(r), Fn.fromBytes(s));\n      }\n      if (format === 'der') {\n        abytes(bytes);\n        const { r, s } = DER.toSig(bytes);\n        return new Signature(r, s);\n      }\n      throw new Error('invalid format');\n    }\n\n    static fromHex(hex: string, format?: ECDSASigFormat) {\n      return this.fromBytes(hexToBytes(hex), format);\n    }\n\n    addRecoveryBit(recovery: number): RecoveredSignature {\n      return new Signature(this.r, this.s, recovery) as RecoveredSignature;\n    }\n\n    // ProjPointType<bigint>\n    recoverPublicKey(msgHash: Hex): typeof Point.BASE {\n      const FIELD_ORDER = Fp.ORDER;\n      const { r, s, recovery: rec } = this;\n      if (rec == null || ![0, 1, 2, 3].includes(rec)) throw new Error('recovery id invalid');\n\n      // ECDSA recovery is hard for cofactor > 1 curves.\n      // In sign, `r = q.x mod n`, and here we recover q.x from r.\n      // While recovering q.x >= n, we need to add r+n for cofactor=1 curves.\n      // However, for cofactor>1, r+n may not get q.x:\n      // r+n*i would need to be done instead where i is unknown.\n      // To easily get i, we either need to:\n      // a. increase amount of valid recid values (4, 5...); OR\n      // b. prohibit non-prime-order signatures (recid > 1).\n      const hasCofactor = CURVE_ORDER * _2n < FIELD_ORDER;\n      if (hasCofactor && rec > 1) throw new Error('recovery id is ambiguous for h>1 curve');\n\n      const radj = rec === 2 || rec === 3 ? r + CURVE_ORDER : r;\n      if (!Fp.isValid(radj)) throw new Error('recovery id 2 or 3 invalid');\n      const x = Fp.toBytes(radj);\n      const R = Point.fromHex(concatBytes(pprefix((rec & 1) === 0), x));\n      const ir = Fn.inv(radj); // r^-1\n      const h = bits2int_modN(ensureBytes('msgHash', msgHash)); // Truncate hash\n      const u1 = Fn.create(-h * ir); // -hr^-1\n      const u2 = Fn.create(s * ir); // sr^-1\n      // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1). unsafe is fine: there is no private data.\n      const Q = Point.BASE.multiplyUnsafe(u1).add(R.multiplyUnsafe(u2));\n      if (Q.is0()) throw new Error('point at infinify');\n      Q.assertValidity();\n      return Q;\n    }\n\n    // Signatures should be low-s, to prevent malleability.\n    hasHighS(): boolean {\n      return isBiggerThanHalfOrder(this.s);\n    }\n\n    normalizeS() {\n      return this.hasHighS() ? new Signature(this.r, Fn.neg(this.s), this.recovery) : this;\n    }\n\n    toBytes(format: ECDSASigFormat = 'compact') {\n      if (format === 'compact') return concatBytes(Fn.toBytes(this.r), Fn.toBytes(this.s));\n      if (format === 'der') return hexToBytes(DER.hexFromSig(this));\n      throw new Error('invalid format');\n    }\n\n    toHex(format?: ECDSASigFormat) {\n      return bytesToHex(this.toBytes(format));\n    }\n\n    // TODO: remove\n    assertValidity(): void {}\n    static fromCompact(hex: Hex) {\n      return Signature.fromBytes(ensureBytes('sig', hex), 'compact');\n    }\n    static fromDER(hex: Hex) {\n      return Signature.fromBytes(ensureBytes('sig', hex), 'der');\n    }\n    toDERRawBytes() {\n      return this.toBytes('der');\n    }\n    toDERHex() {\n      return bytesToHex(this.toBytes('der'));\n    }\n    toCompactRawBytes() {\n      return this.toBytes('compact');\n    }\n    toCompactHex() {\n      return bytesToHex(this.toBytes('compact'));\n    }\n  }\n  type RecoveredSignature = Signature & { recovery: number };\n\n  function isValidSecretKey(privateKey: PrivKey) {\n    try {\n      return !!_normFnElement(Fn, privateKey);\n    } catch (error) {\n      return false;\n    }\n  }\n  function isValidPublicKey(publicKey: Uint8Array, isCompressed?: boolean): boolean {\n    try {\n      const l = publicKey.length;\n      if (isCompressed === true && l !== lengths.public) return false;\n      if (isCompressed === false && l !== lengths.publicUncompressed) return false;\n      return !!Point.fromBytes(publicKey);\n    } catch (error) {\n      return false;\n    }\n  }\n  /**\n   * Produces cryptographically secure secret key from random of size\n   * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.\n   */\n  function randomSecretKey(seed = randomBytes_(seedLen)): Uint8Array {\n    return mapHashToField(seed, CURVE_ORDER);\n  }\n\n  const utils = {\n    isValidSecretKey,\n    isValidPublicKey,\n    randomSecretKey,\n\n    // TODO: remove\n    isValidPrivateKey: isValidSecretKey,\n    randomPrivateKey: randomSecretKey,\n    normPrivateKeyToScalar: (key: PrivKey) => _normFnElement(Fn, key),\n    precompute(windowSize = 8, point = Point.BASE): WeierstrassPoint<bigint> {\n      return point.precompute(windowSize, false);\n    },\n  };\n\n  /**\n   * Computes public key for a secret key. Checks for validity of the secret key.\n   * @param isCompressed whether to return compact (default), or full key\n   * @returns Public key, full when isCompressed=false; short when isCompressed=true\n   */\n  function getPublicKey(secretKey: PrivKey, isCompressed = true): Uint8Array {\n    return Point.BASE.multiply(_normFnElement(Fn, secretKey)).toBytes(isCompressed);\n  }\n\n  /**\n   * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\n   */\n  function isProbPub(item: PrivKey | PubKey): boolean | undefined {\n    // TODO: remove\n    if (typeof item === 'bigint') return false;\n    // TODO: remove\n    if (item instanceof Point) return true;\n    if (Fn.allowedLengths || lengths.secret === lengths.public) return undefined;\n    const l = ensureBytes('key', item).length;\n    return l === lengths.public || l === lengths.publicUncompressed;\n  }\n\n  /**\n   * ECDH (Elliptic Curve Diffie Hellman).\n   * Computes shared public key from secret key A and public key B.\n   * Checks: 1) secret key validity 2) shared key is on-curve.\n   * Does NOT hash the result.\n   * @param isCompressed whether to return compact (default), or full key\n   * @returns shared public key\n   */\n  function getSharedSecret(secretKeyA: PrivKey, publicKeyB: Hex, isCompressed = true): Uint8Array {\n    if (isProbPub(secretKeyA) === true) throw new Error('first arg must be private key');\n    if (isProbPub(publicKeyB) === false) throw new Error('second arg must be public key');\n    const s = _normFnElement(Fn, secretKeyA);\n    const b = Point.fromHex(publicKeyB); // checks for being on-curve\n    return b.multiply(s).toBytes(isCompressed);\n  }\n\n  // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\n  // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\n  // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\n  // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\n  const bits2int =\n    ecdsaOpts.bits2int ||\n    function (bytes: Uint8Array): bigint {\n      // Our custom check \"just in case\", for protection against DoS\n      if (bytes.length > 8192) throw new Error('input is too large');\n      // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\n      // for some cases, since bytes.length * 8 is not actual bitLength.\n      const num = bytesToNumberBE(bytes); // check for == u8 done here\n      const delta = bytes.length * 8 - fnBits; // truncate to nBitLength leftmost bits\n      return delta > 0 ? num >> BigInt(delta) : num;\n    };\n  const bits2int_modN =\n    ecdsaOpts.bits2int_modN ||\n    function (bytes: Uint8Array): bigint {\n      return Fn.create(bits2int(bytes)); // can't use bytesToNumberBE here\n    };\n  // NOTE: pads output with zero as per spec\n  const ORDER_MASK = bitMask(fnBits);\n  /**\n   * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.\n   */\n  function int2octets(num: bigint): Uint8Array {\n    // IMPORTANT: the check ensures working for case `Fn.BYTES != Fn.BITS * 8`\n    aInRange('num < 2^' + fnBits, num, _0n, ORDER_MASK);\n    return Fn.toBytes(num);\n  }\n\n  // Steps A, D of RFC6979 3.2\n  // Creates RFC6979 seed; converts msg/privKey to numbers.\n  // Used only in sign, not in verify.\n  // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order,\n  // this will be invalid at least for P521. Also it can be bigger for P224 + SHA256\n  function prepSig(msgHash: Hex, privateKey: PrivKey, opts = defaultSigOpts) {\n    if (['recovered', 'canonical'].some((k) => k in opts))\n      throw new Error('sign() legacy options not supported');\n    let { lowS, prehash, extraEntropy: ent } = opts; // generates low-s sigs by default\n    if (lowS == null) lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash\n    msgHash = ensureBytes('msgHash', msgHash);\n    validateSigVerOpts(opts);\n    if (prehash) msgHash = ensureBytes('prehashed msgHash', hash(msgHash));\n\n    // We can't later call bits2octets, since nested bits2int is broken for curves\n    // with fnBits % 8 !== 0. Because of that, we unwrap it here as int2octets call.\n    // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\n    const h1int = bits2int_modN(msgHash);\n    const d = _normFnElement(Fn, privateKey); // validate secret key, convert to bigint\n    const seedArgs = [int2octets(d), int2octets(h1int)];\n    // extraEntropy. RFC6979 3.6: additional k' (optional).\n    if (ent != null && ent !== false) {\n      // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\n      const e = ent === true ? randomBytes_(lengths.secret) : ent; // gen random bytes OR pass as-is\n      seedArgs.push(ensureBytes('extraEntropy', e)); // check for being bytes\n    }\n    const seed = concatBytes(...seedArgs); // Step D of RFC6979 3.2\n    const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\n    // Converts signature params into point w r/s, checks result for validity.\n    // To transform k => Signature:\n    // q = k⋅G\n    // r = q.x mod n\n    // s = k^-1(m + rd) mod n\n    // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to\n    // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\n    // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\n    function k2sig(kBytes: Uint8Array): RecoveredSignature | undefined {\n      // RFC 6979 Section 3.2, step 3: k = bits2int(T)\n      // Important: all mod() calls here must be done over N\n      const k = bits2int(kBytes); // Cannot use fields methods, since it is group element\n      if (!Fn.isValidNot0(k)) return; // Valid scalars (including k) must be in 1..N-1\n      const ik = Fn.inv(k); // k^-1 mod n\n      const q = Point.BASE.multiply(k).toAffine(); // q = k⋅G\n      const r = Fn.create(q.x); // r = q.x mod n\n      if (r === _0n) return;\n      const s = Fn.create(ik * Fn.create(m + r * d)); // Not using blinding here, see comment above\n      if (s === _0n) return;\n      let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\n      let normS = s;\n      if (lowS && isBiggerThanHalfOrder(s)) {\n        normS = normalizeS(s); // if lowS was passed, ensure s is always\n        recovery ^= 1; // // in the bottom half of N\n      }\n      return new Signature(r, normS, recovery) as RecoveredSignature; // use normS, not s\n    }\n    return { seed, k2sig };\n  }\n  const defaultSigOpts: SignOpts = { lowS: ecdsaOpts.lowS, prehash: false };\n  const defaultVerOpts: VerOpts = { lowS: ecdsaOpts.lowS, prehash: false };\n\n  /**\n   * Signs message hash with a secret key.\n   * ```\n   * sign(m, d, k) where\n   *   (x, y) = G × k\n   *   r = x mod n\n   *   s = (m + dr)/k mod n\n   * ```\n   */\n  function sign(msgHash: Hex, secretKey: PrivKey, opts = defaultSigOpts): RecoveredSignature {\n    const { seed, k2sig } = prepSig(msgHash, secretKey, opts); // Steps A, D of RFC6979 3.2.\n    const drbg = createHmacDrbg<RecoveredSignature>(hash.outputLen, Fn.BYTES, hmac_);\n    return drbg(seed, k2sig); // Steps B, C, D, E, F, G\n  }\n\n  // Enable precomputes. Slows down first publicKey computation by 20ms.\n  Point.BASE.precompute(8);\n\n  /**\n   * Verifies a signature against message hash and public key.\n   * Rejects lowS signatures by default: to override,\n   * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\n   *\n   * ```\n   * verify(r, s, h, P) where\n   *   U1 = hs^-1 mod n\n   *   U2 = rs^-1 mod n\n   *   R = U1⋅G - U2⋅P\n   *   mod(R.x, n) == r\n   * ```\n   */\n  function verify(\n    signature: Hex | SignatureLike,\n    msgHash: Hex,\n    publicKey: Hex,\n    opts = defaultVerOpts\n  ): boolean {\n    const sg = signature;\n    msgHash = ensureBytes('msgHash', msgHash);\n    publicKey = ensureBytes('publicKey', publicKey);\n\n    // Verify opts\n    validateSigVerOpts(opts);\n    const { lowS, prehash, format } = opts;\n\n    // TODO: remove\n    if ('strict' in opts) throw new Error('options.strict was renamed to lowS');\n\n    let _sig: Signature | undefined = undefined;\n    let P: WeierstrassPoint<bigint>;\n\n    if (format === undefined) {\n      // Try to deduce format\n      const isHex = typeof sg === 'string' || isBytes(sg);\n      const isObj =\n        !isHex &&\n        sg !== null &&\n        typeof sg === 'object' &&\n        typeof sg.r === 'bigint' &&\n        typeof sg.s === 'bigint';\n      if (!isHex && !isObj)\n        throw new Error('invalid signature, expected Uint8Array, hex string or Signature instance');\n      if (isObj) {\n        _sig = new Signature(sg.r, sg.s);\n      } else if (isHex) {\n        // TODO: remove this malleable check\n        // Signature can be represented in 2 ways: compact (2*Fn.BYTES) & DER (variable-length).\n        // Since DER can also be 2*Fn.BYTES bytes, we check for it first.\n        try {\n          _sig = Signature.fromDER(sg);\n        } catch (derError) {\n          if (!(derError instanceof DER.Err)) throw derError;\n        }\n        if (!_sig) {\n          try {\n            _sig = Signature.fromCompact(sg);\n          } catch (error) {\n            return false;\n          }\n        }\n      }\n    } else {\n      if (format === 'compact' || format === 'der') {\n        if (typeof sg !== 'string' && !isBytes(sg))\n          throw new Error('\"der\" / \"compact\" format expects Uint8Array signature');\n        _sig = Signature.fromBytes(ensureBytes('sig', sg), format);\n      } else if (format === 'js') {\n        if (!(sg instanceof Signature)) throw new Error('\"js\" format expects Signature instance');\n        _sig = sg;\n      } else {\n        throw new Error('format must be \"compact\", \"der\" or \"js\"');\n      }\n    }\n\n    if (!_sig) return false;\n    try {\n      P = Point.fromHex(publicKey);\n      if (lowS && _sig.hasHighS()) return false;\n      // todo: optional.hash => hash\n      if (prehash) msgHash = hash(msgHash);\n      const { r, s } = _sig;\n      const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element\n      const is = Fn.inv(s); // s^-1\n      const u1 = Fn.create(h * is); // u1 = hs^-1 mod n\n      const u2 = Fn.create(r * is); // u2 = rs^-1 mod n\n      const R = Point.BASE.multiplyUnsafe(u1).add(P.multiplyUnsafe(u2));\n      if (R.is0()) return false;\n      const v = Fn.create(R.x); // v = r.x mod n\n      return v === r;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  function keygen(seed?: Uint8Array) {\n    const secretKey = utils.randomSecretKey(seed);\n    return { secretKey, publicKey: getPublicKey(secretKey) };\n  }\n\n  return Object.freeze({\n    keygen,\n    getPublicKey,\n    sign,\n    verify,\n    getSharedSecret,\n    utils,\n    Point,\n    Signature,\n    info: { type: 'weierstrass' as const, lengths, publicKeyHasPrefix: true },\n  });\n}\n\n// TODO: remove\nexport type WsPointComposed<T> = {\n  CURVE: WeierstrassOpts<T>;\n  curveOpts: WeierstrassExtraOpts<T>;\n};\n// TODO: remove\nexport type WsComposed = {\n  CURVE: WeierstrassOpts<bigint>;\n  hash: CHash;\n  curveOpts: WeierstrassExtraOpts<bigint>;\n  ecdsaOpts: ECDSAOpts;\n};\n// TODO: remove\nfunction _weierstrass_legacy_opts_to_new<T>(c: CurvePointsType<T>): WsPointComposed<T> {\n  const CURVE: WeierstrassOpts<T> = {\n    a: c.a,\n    b: c.b,\n    p: c.Fp.ORDER,\n    n: c.n,\n    h: c.h,\n    Gx: c.Gx,\n    Gy: c.Gy,\n  };\n  const Fp = c.Fp;\n  let allowedLengths = c.allowedPrivateKeyLengths\n    ? Array.from(new Set(c.allowedPrivateKeyLengths.map((l) => Math.ceil(l / 2))))\n    : undefined;\n  const Fn = Field(CURVE.n, {\n    BITS: c.nBitLength,\n    allowedLengths: allowedLengths,\n    modOnDecode: c.wrapPrivateKey,\n  });\n  const curveOpts: WeierstrassExtraOpts<T> = {\n    Fp,\n    Fn,\n    allowInfinityPoint: c.allowInfinityPoint,\n    endo: c.endo,\n    isTorsionFree: c.isTorsionFree,\n    clearCofactor: c.clearCofactor,\n    fromBytes: c.fromBytes,\n    toBytes: c.toBytes,\n  };\n  return { CURVE, curveOpts };\n}\nfunction _ecdsa_legacy_opts_to_new(c: CurveType): WsComposed {\n  const { CURVE, curveOpts } = _weierstrass_legacy_opts_to_new(c);\n  const ecdsaOpts: ECDSAOpts = {\n    hmac: c.hmac,\n    randomBytes: c.randomBytes,\n    lowS: c.lowS,\n    bits2int: c.bits2int,\n    bits2int_modN: c.bits2int_modN,\n  };\n  return { CURVE, curveOpts, hash: c.hash, ecdsaOpts };\n}\n// TODO: remove\nfunction _weierstrass_new_output_to_legacy<T>(\n  c: CurvePointsType<T>,\n  Point: WeierstrassPointCons<T>\n): CurvePointsRes<T> {\n  const { Fp, Fn } = Point;\n  // TODO: remove\n  function isWithinCurveOrder(num: bigint): boolean {\n    return inRange(num, _1n, Fn.ORDER);\n  }\n  const weierstrassEquation = _legacyHelperEquat(Fp, c.a, c.b);\n  return Object.assign(\n    {},\n    {\n      CURVE: c,\n      Point: Point,\n      ProjectivePoint: Point,\n      normPrivateKeyToScalar: (key: PrivKey) => _normFnElement(Fn, key),\n      weierstrassEquation,\n      isWithinCurveOrder,\n    }\n  );\n}\n// TODO: remove\nfunction _ecdsa_new_output_to_legacy(c: CurveType, ecdsa: ECDSA): CurveFn {\n  return Object.assign({}, ecdsa, {\n    ProjectivePoint: ecdsa.Point,\n    CURVE: c,\n  });\n}\n\n// _ecdsa_legacy\nexport function weierstrass(c: CurveType): CurveFn {\n  const { CURVE, curveOpts, hash, ecdsaOpts } = _ecdsa_legacy_opts_to_new(c);\n  const Point = weierstrassN(CURVE, curveOpts);\n  const signs = ecdsa(Point, hash, ecdsaOpts);\n  return _ecdsa_new_output_to_legacy(c, signs);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}