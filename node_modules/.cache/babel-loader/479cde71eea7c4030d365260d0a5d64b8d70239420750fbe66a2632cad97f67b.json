{"ast":null,"code":"import{Connection,PublicKey,clusterApiUrl}from'@solana/web3.js';const PUMP_MINT=new PublicKey('3HfLqhtF5hR5dyBXh6BMtRaTm9qzStvEGuMa8Gx6pump');export class WalletService{constructor(){this.connection=new Connection(clusterApiUrl('mainnet-beta'));this.connectedWallet=null;this.initialized=false;}initialize(){if(this.initialized)return;console.log('üí≥ WalletService initialized');this.initialized=true;}// Helper to fetch SPL token balance\nasync fetchSplTokenBalance(ownerAddress){let mint=arguments.length>1&&arguments[1]!==undefined?arguments[1]:PUMP_MINT;const tokenAccounts=await this.connection.getParsedTokenAccountsByOwner(new PublicKey(ownerAddress),{mint});let amount=0;if(tokenAccounts.value.length>0){amount=tokenAccounts.value[0].account.data.parsed.info.tokenAmount.uiAmount;}return amount;}// Connect to Phantom wallet\nasync connect(){if(!window.solana||!window.solana.isPhantom){throw new Error('Phantom wallet is not installed');}try{const resp=await window.solana.connect();const address=resp.publicKey.toString();const balanceLamports=await this.connection.getBalance(new PublicKey(address));const balance=balanceLamports/1e9;// Convert lamports to SOL\nconst tokenBalance=await this.fetchSplTokenBalance(address);this.connectedWallet={connected:true,address,balance,tokenBalance,nickname:null};console.log('‚úÖ Wallet connected:',this.connectedWallet);return this.connectedWallet;}catch(err){throw new Error('User rejected wallet connection or Phantom not available');}}// Disconnect wallet (just clear state)\nasync disconnect(){if(window.solana&&window.solana.isPhantom){try{await window.solana.disconnect();}catch(e){}}this.connectedWallet=null;console.log('‚ùå Wallet disconnected');}// Get current wallet info\ngetWalletInfo(){return this.connectedWallet;}// Update balance (SOL and token)\nasync updateBalance(address){if(!address){throw new Error('Wallet not connected');}const balanceLamports=await this.connection.getBalance(new PublicKey(address));const balance=balanceLamports/1e9;const tokenBalance=await this.fetchSplTokenBalance(address);this.connectedWallet.balance=balance;this.connectedWallet.tokenBalance=tokenBalance;return{balance:this.connectedWallet.balance,tokenBalance:this.connectedWallet.tokenBalance};}// Utility: is wallet connected?\nisConnected(){return this.connectedWallet!==null;}// Utility: get connected address\ngetConnectedAddress(){var _this$connectedWallet;return((_this$connectedWallet=this.connectedWallet)===null||_this$connectedWallet===void 0?void 0:_this$connectedWallet.address)||null;}// Utility: format address for display\nformatAddress(address){if(!address)return'';if(address.length<=8)return address;return`${address.substring(0,4)}...${address.substring(address.length-4)}`;}}","map":{"version":3,"names":["Connection","PublicKey","clusterApiUrl","PUMP_MINT","WalletService","constructor","connection","connectedWallet","initialized","initialize","console","log","fetchSplTokenBalance","ownerAddress","mint","arguments","length","undefined","tokenAccounts","getParsedTokenAccountsByOwner","amount","value","account","data","parsed","info","tokenAmount","uiAmount","connect","window","solana","isPhantom","Error","resp","address","publicKey","toString","balanceLamports","getBalance","balance","tokenBalance","connected","nickname","err","disconnect","e","getWalletInfo","updateBalance","isConnected","getConnectedAddress","_this$connectedWallet","formatAddress","substring"],"sources":["C:/dev.fun/src/services/WalletService.js"],"sourcesContent":["import { Connection, PublicKey, clusterApiUrl } from '@solana/web3.js';\r\n\r\nconst PUMP_MINT = new PublicKey('3HfLqhtF5hR5dyBXh6BMtRaTm9qzStvEGuMa8Gx6pump');\r\n\r\nexport class WalletService {\r\n  constructor() {\r\n    this.connection = new Connection(clusterApiUrl('mainnet-beta'));\r\n    this.connectedWallet = null;\r\n    this.initialized = false;\r\n  }\r\n\r\n  initialize() {\r\n    if (this.initialized) return;\r\n    console.log('üí≥ WalletService initialized');\r\n    this.initialized = true;\r\n  }\r\n\r\n  // Helper to fetch SPL token balance\r\n  async fetchSplTokenBalance(ownerAddress, mint = PUMP_MINT) {\r\n    const tokenAccounts = await this.connection.getParsedTokenAccountsByOwner(\r\n      new PublicKey(ownerAddress),\r\n      { mint }\r\n    );\r\n    let amount = 0;\r\n    if (tokenAccounts.value.length > 0) {\r\n      amount = tokenAccounts.value[0].account.data.parsed.info.tokenAmount.uiAmount;\r\n    }\r\n    return amount;\r\n  }\r\n\r\n  // Connect to Phantom wallet\r\n  async connect() {\r\n    if (!window.solana || !window.solana.isPhantom) {\r\n      throw new Error('Phantom wallet is not installed');\r\n    }\r\n    try {\r\n      const resp = await window.solana.connect();\r\n      const address = resp.publicKey.toString();\r\n      const balanceLamports = await this.connection.getBalance(new PublicKey(address));\r\n      const balance = balanceLamports / 1e9; // Convert lamports to SOL\r\n      const tokenBalance = await this.fetchSplTokenBalance(address);\r\n      this.connectedWallet = {\r\n        connected: true,\r\n        address,\r\n        balance,\r\n        tokenBalance,\r\n        nickname: null\r\n      };\r\n      console.log('‚úÖ Wallet connected:', this.connectedWallet);\r\n      return this.connectedWallet;\r\n    } catch (err) {\r\n      throw new Error('User rejected wallet connection or Phantom not available');\r\n    }\r\n  }\r\n\r\n  // Disconnect wallet (just clear state)\r\n  async disconnect() {\r\n    if (window.solana && window.solana.isPhantom) {\r\n      try { await window.solana.disconnect(); } catch (e) {}\r\n    }\r\n    this.connectedWallet = null;\r\n    console.log('‚ùå Wallet disconnected');\r\n  }\r\n\r\n  // Get current wallet info\r\n  getWalletInfo() {\r\n    return this.connectedWallet;\r\n  }\r\n\r\n  // Update balance (SOL and token)\r\n  async updateBalance(address) {\r\n    if (!address) {\r\n      throw new Error('Wallet not connected');\r\n    }\r\n    const balanceLamports = await this.connection.getBalance(new PublicKey(address));\r\n    const balance = balanceLamports / 1e9;\r\n    const tokenBalance = await this.fetchSplTokenBalance(address);\r\n    this.connectedWallet.balance = balance;\r\n    this.connectedWallet.tokenBalance = tokenBalance;\r\n    return {\r\n      balance: this.connectedWallet.balance,\r\n      tokenBalance: this.connectedWallet.tokenBalance\r\n    };\r\n  }\r\n\r\n  // Utility: is wallet connected?\r\n  isConnected() {\r\n    return this.connectedWallet !== null;\r\n  }\r\n\r\n  // Utility: get connected address\r\n  getConnectedAddress() {\r\n    return this.connectedWallet?.address || null;\r\n  }\r\n\r\n  // Utility: format address for display\r\n  formatAddress(address) {\r\n    if (!address) return '';\r\n    if (address.length <= 8) return address;\r\n    return `${address.substring(0, 4)}...${address.substring(address.length - 4)}`;\r\n  }\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}