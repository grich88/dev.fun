{"ast":null,"code":"/**\n * SECG secp256k1. See [pdf](https://www.secg.org/sec2-v2.pdf).\n *\n * Belongs to Koblitz curves: it has efficiently-computable GLV endomorphism ψ,\n * check out {@link EndomorphismOpts}. Seems to be rigid (not backdoored).\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha256 } from '@noble/hashes/sha2.js';\nimport { randomBytes } from '@noble/hashes/utils.js';\nimport { createCurve } from \"./_shortw_utils.js\";\nimport { createHasher, isogenyMap } from \"./abstract/hash-to-curve.js\";\nimport { Field, mapHashToField, mod, pow2 } from \"./abstract/modular.js\";\nimport { _normFnElement, mapToCurveSimpleSWU } from \"./abstract/weierstrass.js\";\nimport { aInRange, bytesToNumberBE, concatBytes, ensureBytes, inRange, numberToBytesBE } from \"./utils.js\";\n// Seems like generator was produced from some seed:\n// `Point.BASE.multiply(Point.Fn.inv(2n, N)).toAffine().x`\n// // gives short x 0x3b78ce563f89a0ed9414f5aa28ad0d96d6795f9c63n\nconst secp256k1_CURVE = {\n  p: BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f'),\n  n: BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141'),\n  h: BigInt(1),\n  a: BigInt(0),\n  b: BigInt(7),\n  Gx: BigInt('0x79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798'),\n  Gy: BigInt('0x483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8')\n};\nconst secp256k1_ENDO = {\n  beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n  basises: [[BigInt('0x3086d221a7d46bcde86c90e49284eb15'), -BigInt('0xe4437ed6010e88286f547fa90abfe4c3')], [BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8'), BigInt('0x3086d221a7d46bcde86c90e49284eb15')]]\n};\nconst _0n = /* @__PURE__ */BigInt(0);\nconst _1n = /* @__PURE__ */BigInt(1);\nconst _2n = /* @__PURE__ */BigInt(2);\n/**\n * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.\n * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]\n */\nfunction sqrtMod(y) {\n  const P = secp256k1_CURVE.p;\n  // prettier-ignore\n  const _3n = BigInt(3),\n    _6n = BigInt(6),\n    _11n = BigInt(11),\n    _22n = BigInt(22);\n  // prettier-ignore\n  const _23n = BigInt(23),\n    _44n = BigInt(44),\n    _88n = BigInt(88);\n  const b2 = y * y * y % P; // x^3, 11\n  const b3 = b2 * b2 * y % P; // x^7\n  const b6 = pow2(b3, _3n, P) * b3 % P;\n  const b9 = pow2(b6, _3n, P) * b3 % P;\n  const b11 = pow2(b9, _2n, P) * b2 % P;\n  const b22 = pow2(b11, _11n, P) * b11 % P;\n  const b44 = pow2(b22, _22n, P) * b22 % P;\n  const b88 = pow2(b44, _44n, P) * b44 % P;\n  const b176 = pow2(b88, _88n, P) * b88 % P;\n  const b220 = pow2(b176, _44n, P) * b44 % P;\n  const b223 = pow2(b220, _3n, P) * b3 % P;\n  const t1 = pow2(b223, _23n, P) * b22 % P;\n  const t2 = pow2(t1, _6n, P) * b2 % P;\n  const root = pow2(t2, _2n, P);\n  if (!Fpk1.eql(Fpk1.sqr(root), y)) throw new Error('Cannot find square root');\n  return root;\n}\nconst Fpk1 = Field(secp256k1_CURVE.p, undefined, undefined, {\n  sqrt: sqrtMod\n});\n/**\n * secp256k1 curve, ECDSA and ECDH methods.\n *\n * Field: `2n**256n - 2n**32n - 2n**9n - 2n**8n - 2n**7n - 2n**6n - 2n**4n - 1n`\n *\n * @example\n * ```js\n * import { secp256k1 } from '@noble/curves/secp256k1';\n * const { secretKey, publicKey } = secp256k1.keygen();\n * const msg = new TextEncoder().encode('hello');\n * const sig = secp256k1.sign(msg, secretKey);\n * const isValid = secp256k1.verify(sig, msg, publicKey) === true;\n * ```\n */\nexport const secp256k1 = createCurve({\n  ...secp256k1_CURVE,\n  Fp: Fpk1,\n  lowS: true,\n  endo: secp256k1_ENDO\n}, sha256);\n// Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.\n// https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\n/** An object mapping tags to their tagged hash prefix of [SHA256(tag) | SHA256(tag)] */\nconst TAGGED_HASH_PREFIXES = {};\nfunction taggedHash(tag, ...messages) {\n  let tagP = TAGGED_HASH_PREFIXES[tag];\n  if (tagP === undefined) {\n    const tagH = sha256(Uint8Array.from(tag, c => c.charCodeAt(0)));\n    tagP = concatBytes(tagH, tagH);\n    TAGGED_HASH_PREFIXES[tag] = tagP;\n  }\n  return sha256(concatBytes(tagP, ...messages));\n}\n// ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03\nconst pointToBytes = point => point.toBytes(true).slice(1);\nconst numTo32b = n => numberToBytesBE(n, 32);\nconst modP = x => mod(x, secp256k1_CURVE.p);\nconst modN = x => mod(x, secp256k1_CURVE.n);\nconst Point = /* @__PURE__ */(() => secp256k1.Point)();\nconst hasEven = y => y % _2n === _0n;\n// Calculate point, scalar and bytes\nfunction schnorrGetExtPubKey(priv) {\n  // TODO: replace with Point.Fn.fromBytes(priv)\n  let d_ = _normFnElement(Point.Fn, priv);\n  let p = Point.BASE.multiply(d_); // P = d'⋅G; 0 < d' < n check is done inside\n  const scalar = hasEven(p.y) ? d_ : modN(-d_);\n  return {\n    scalar,\n    bytes: pointToBytes(p)\n  };\n}\n/**\n * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.\n * @returns valid point checked for being on-curve\n */\nfunction lift_x(x) {\n  aInRange('x', x, _1n, secp256k1_CURVE.p); // Fail if x ≥ p.\n  const xx = modP(x * x);\n  const c = modP(xx * x + BigInt(7)); // Let c = x³ + 7 mod p.\n  let y = sqrtMod(c); // Let y = c^(p+1)/4 mod p.\n  if (!hasEven(y)) y = modP(-y); // Return the unique point P such that x(P) = x and\n  const p = Point.fromAffine({\n    x,\n    y\n  }); // y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.\n  p.assertValidity();\n  return p;\n}\nconst num = bytesToNumberBE;\n/**\n * Create tagged hash, convert it to bigint, reduce modulo-n.\n */\nfunction challenge(...args) {\n  return modN(num(taggedHash('BIP0340/challenge', ...args)));\n}\n/**\n * Schnorr public key is just `x` coordinate of Point as per BIP340.\n */\nfunction schnorrGetPublicKey(secretKey) {\n  return schnorrGetExtPubKey(secretKey).bytes; // d'=int(sk). Fail if d'=0 or d'≥n. Ret bytes(d'⋅G)\n}\n/**\n * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.\n * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.\n */\nfunction schnorrSign(message, secretKey, auxRand = randomBytes(32)) {\n  const m = ensureBytes('message', message);\n  const {\n    bytes: px,\n    scalar: d\n  } = schnorrGetExtPubKey(secretKey); // checks for isWithinCurveOrder\n  const a = ensureBytes('auxRand', auxRand, 32); // Auxiliary random data a: a 32-byte array\n  const t = numTo32b(d ^ num(taggedHash('BIP0340/aux', a))); // Let t be the byte-wise xor of bytes(d) and hash/aux(a)\n  const rand = taggedHash('BIP0340/nonce', t, px, m); // Let rand = hash/nonce(t || bytes(P) || m)\n  const k_ = modN(num(rand)); // Let k' = int(rand) mod n\n  if (k_ === _0n) throw new Error('sign failed: k is zero'); // Fail if k' = 0.\n  const {\n    bytes: rx,\n    scalar: k\n  } = schnorrGetExtPubKey(k_); // Let R = k'⋅G.\n  const e = challenge(rx, px, m); // Let e = int(hash/challenge(bytes(R) || bytes(P) || m)) mod n.\n  const sig = new Uint8Array(64); // Let sig = bytes(R) || bytes((k + ed) mod n).\n  sig.set(rx, 0);\n  sig.set(numTo32b(modN(k + e * d)), 32);\n  // If Verify(bytes(P), m, sig) (see below) returns failure, abort\n  if (!schnorrVerify(sig, m, px)) throw new Error('sign: Invalid signature produced');\n  return sig;\n}\n/**\n * Verifies Schnorr signature.\n * Will swallow errors & return false except for initial type validation of arguments.\n */\nfunction schnorrVerify(signature, message, publicKey) {\n  const sig = ensureBytes('signature', signature, 64);\n  const m = ensureBytes('message', message);\n  const pub = ensureBytes('publicKey', publicKey, 32);\n  try {\n    const P = lift_x(num(pub)); // P = lift_x(int(pk)); fail if that fails\n    const r = num(sig.subarray(0, 32)); // Let r = int(sig[0:32]); fail if r ≥ p.\n    if (!inRange(r, _1n, secp256k1_CURVE.p)) return false;\n    const s = num(sig.subarray(32, 64)); // Let s = int(sig[32:64]); fail if s ≥ n.\n    if (!inRange(s, _1n, secp256k1_CURVE.n)) return false;\n    const e = challenge(numTo32b(r), pointToBytes(P), m); // int(challenge(bytes(r)||bytes(P)||m))%n\n    // R = s⋅G - e⋅P, where -eP == (n-e)P\n    const R = Point.BASE.multiplyUnsafe(s).add(P.multiplyUnsafe(modN(-e)));\n    const {\n      x,\n      y\n    } = R.toAffine();\n    // Fail if is_infinite(R) / not has_even_y(R) / x(R) ≠ r.\n    if (R.is0() || !hasEven(y) || x !== r) return false;\n    return true;\n  } catch (error) {\n    return false;\n  }\n}\n/**\n * Schnorr signatures over secp256k1.\n * https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\n * @example\n * ```js\n * import { schnorr } from '@noble/curves/secp256k1';\n * const { secretKey, publicKey } = schnorr.keygen();\n * // const publicKey = schnorr.getPublicKey(secretKey);\n * const msg = new TextEncoder().encode('hello');\n * const sig = schnorr.sign(msg, secretKey);\n * const isValid = schnorr.verify(sig, msg, publicKey);\n * ```\n */\nexport const schnorr = /* @__PURE__ */(() => {\n  const size = 32;\n  const seedLength = 48;\n  const randomSecretKey = (seed = randomBytes(seedLength)) => {\n    return mapHashToField(seed, secp256k1_CURVE.n);\n  };\n  // TODO: remove\n  secp256k1.utils.randomSecretKey;\n  function keygen(seed) {\n    const secretKey = randomSecretKey(seed);\n    return {\n      secretKey,\n      publicKey: schnorrGetPublicKey(secretKey)\n    };\n  }\n  return {\n    keygen,\n    getPublicKey: schnorrGetPublicKey,\n    sign: schnorrSign,\n    verify: schnorrVerify,\n    Point,\n    utils: {\n      randomSecretKey: randomSecretKey,\n      randomPrivateKey: randomSecretKey,\n      taggedHash,\n      // TODO: remove\n      lift_x,\n      pointToBytes,\n      numberToBytesBE,\n      bytesToNumberBE,\n      mod\n    },\n    info: {\n      type: 'weierstrass',\n      publicKeyHasPrefix: false,\n      lengths: {\n        secret: size,\n        public: size,\n        signature: size * 2,\n        seed: seedLength\n      }\n    }\n  };\n})();\nconst isoMap = /* @__PURE__ */(() => isogenyMap(Fpk1, [\n// xNum\n['0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7', '0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581', '0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262', '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c'],\n// xDen\n['0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b', '0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14', '0x0000000000000000000000000000000000000000000000000000000000000001' // LAST 1\n],\n// yNum\n['0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c', '0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3', '0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931', '0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84'],\n// yDen\n['0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b', '0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573', '0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f', '0x0000000000000000000000000000000000000000000000000000000000000001' // LAST 1\n]].map(i => i.map(j => BigInt(j)))))();\nconst mapSWU = /* @__PURE__ */(() => mapToCurveSimpleSWU(Fpk1, {\n  A: BigInt('0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533'),\n  B: BigInt('1771'),\n  Z: Fpk1.create(BigInt('-11'))\n}))();\n/** Hashing / encoding to secp256k1 points / field. RFC 9380 methods. */\nexport const secp256k1_hasher = /* @__PURE__ */(() => createHasher(secp256k1.Point, scalars => {\n  const {\n    x,\n    y\n  } = mapSWU(Fpk1.create(scalars[0]));\n  return isoMap(x, y);\n}, {\n  DST: 'secp256k1_XMD:SHA-256_SSWU_RO_',\n  encodeDST: 'secp256k1_XMD:SHA-256_SSWU_NU_',\n  p: Fpk1.ORDER,\n  m: 1,\n  k: 128,\n  expand: 'xmd',\n  hash: sha256\n}))();\n/** @deprecated use `import { secp256k1_hasher } from '@noble/curves/secp256k1.js';` */\nexport const hashToCurve = /* @__PURE__ */(() => secp256k1_hasher.hashToCurve)();\n/** @deprecated use `import { secp256k1_hasher } from '@noble/curves/secp256k1.js';` */\nexport const encodeToCurve = /* @__PURE__ */(() => secp256k1_hasher.encodeToCurve)();","map":{"version":3,"names":["sha256","randomBytes","createCurve","createHasher","isogenyMap","Field","mapHashToField","mod","pow2","_normFnElement","mapToCurveSimpleSWU","aInRange","bytesToNumberBE","concatBytes","ensureBytes","inRange","numberToBytesBE","secp256k1_CURVE","p","BigInt","n","h","a","b","Gx","Gy","secp256k1_ENDO","beta","basises","_0n","_1n","_2n","sqrtMod","y","P","_3n","_6n","_11n","_22n","_23n","_44n","_88n","b2","b3","b6","b9","b11","b22","b44","b88","b176","b220","b223","t1","t2","root","Fpk1","eql","sqr","Error","undefined","sqrt","secp256k1","Fp","lowS","endo","TAGGED_HASH_PREFIXES","taggedHash","tag","messages","tagP","tagH","Uint8Array","from","c","charCodeAt","pointToBytes","point","toBytes","slice","numTo32b","modP","x","modN","Point","hasEven","schnorrGetExtPubKey","priv","d_","Fn","BASE","multiply","scalar","bytes","lift_x","xx","fromAffine","assertValidity","num","challenge","args","schnorrGetPublicKey","secretKey","schnorrSign","message","auxRand","m","px","d","t","rand","k_","rx","k","e","sig","set","schnorrVerify","signature","publicKey","pub","r","subarray","s","R","multiplyUnsafe","add","toAffine","is0","error","schnorr","size","seedLength","randomSecretKey","seed","utils","keygen","getPublicKey","sign","verify","randomPrivateKey","info","type","publicKeyHasPrefix","lengths","secret","public","isoMap","map","i","j","mapSWU","A","B","Z","create","secp256k1_hasher","scalars","DST","encodeDST","ORDER","expand","hash","hashToCurve","encodeToCurve"],"sources":["C:\\dev.fun\\node_modules\\@solana\\web3.js\\node_modules\\@noble\\curves\\src\\secp256k1.ts"],"sourcesContent":["/**\n * SECG secp256k1. See [pdf](https://www.secg.org/sec2-v2.pdf).\n *\n * Belongs to Koblitz curves: it has efficiently-computable GLV endomorphism ψ,\n * check out {@link EndomorphismOpts}. Seems to be rigid (not backdoored).\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha256 } from '@noble/hashes/sha2.js';\nimport { randomBytes } from '@noble/hashes/utils.js';\nimport { createCurve, type CurveFnWithCreate } from './_shortw_utils.ts';\nimport type { CurveInfo } from './abstract/curve.ts';\nimport {\n  createHasher,\n  type H2CHasher,\n  type H2CMethod,\n  isogenyMap,\n} from './abstract/hash-to-curve.ts';\nimport { Field, mapHashToField, mod, pow2 } from './abstract/modular.ts';\nimport {\n  _normFnElement,\n  type EndomorphismOpts,\n  mapToCurveSimpleSWU,\n  type WeierstrassPoint as PointType,\n  type WeierstrassOpts,\n  type WeierstrassPointCons,\n} from './abstract/weierstrass.ts';\nimport type { Hex, PrivKey } from './utils.ts';\nimport {\n  aInRange,\n  bytesToNumberBE,\n  concatBytes,\n  ensureBytes,\n  inRange,\n  numberToBytesBE,\n} from './utils.ts';\n\n// Seems like generator was produced from some seed:\n// `Point.BASE.multiply(Point.Fn.inv(2n, N)).toAffine().x`\n// // gives short x 0x3b78ce563f89a0ed9414f5aa28ad0d96d6795f9c63n\nconst secp256k1_CURVE: WeierstrassOpts<bigint> = {\n  p: BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f'),\n  n: BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141'),\n  h: BigInt(1),\n  a: BigInt(0),\n  b: BigInt(7),\n  Gx: BigInt('0x79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798'),\n  Gy: BigInt('0x483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8'),\n};\n\nconst secp256k1_ENDO: EndomorphismOpts = {\n  beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n  basises: [\n    [BigInt('0x3086d221a7d46bcde86c90e49284eb15'), -BigInt('0xe4437ed6010e88286f547fa90abfe4c3')],\n    [BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8'), BigInt('0x3086d221a7d46bcde86c90e49284eb15')],\n  ],\n};\n\nconst _0n = /* @__PURE__ */ BigInt(0);\nconst _1n = /* @__PURE__ */ BigInt(1);\nconst _2n = /* @__PURE__ */ BigInt(2);\n\n/**\n * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.\n * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]\n */\nfunction sqrtMod(y: bigint): bigint {\n  const P = secp256k1_CURVE.p;\n  // prettier-ignore\n  const _3n = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);\n  // prettier-ignore\n  const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);\n  const b2 = (y * y * y) % P; // x^3, 11\n  const b3 = (b2 * b2 * y) % P; // x^7\n  const b6 = (pow2(b3, _3n, P) * b3) % P;\n  const b9 = (pow2(b6, _3n, P) * b3) % P;\n  const b11 = (pow2(b9, _2n, P) * b2) % P;\n  const b22 = (pow2(b11, _11n, P) * b11) % P;\n  const b44 = (pow2(b22, _22n, P) * b22) % P;\n  const b88 = (pow2(b44, _44n, P) * b44) % P;\n  const b176 = (pow2(b88, _88n, P) * b88) % P;\n  const b220 = (pow2(b176, _44n, P) * b44) % P;\n  const b223 = (pow2(b220, _3n, P) * b3) % P;\n  const t1 = (pow2(b223, _23n, P) * b22) % P;\n  const t2 = (pow2(t1, _6n, P) * b2) % P;\n  const root = pow2(t2, _2n, P);\n  if (!Fpk1.eql(Fpk1.sqr(root), y)) throw new Error('Cannot find square root');\n  return root;\n}\n\nconst Fpk1 = Field(secp256k1_CURVE.p, undefined, undefined, { sqrt: sqrtMod });\n\n/**\n * secp256k1 curve, ECDSA and ECDH methods.\n *\n * Field: `2n**256n - 2n**32n - 2n**9n - 2n**8n - 2n**7n - 2n**6n - 2n**4n - 1n`\n *\n * @example\n * ```js\n * import { secp256k1 } from '@noble/curves/secp256k1';\n * const { secretKey, publicKey } = secp256k1.keygen();\n * const msg = new TextEncoder().encode('hello');\n * const sig = secp256k1.sign(msg, secretKey);\n * const isValid = secp256k1.verify(sig, msg, publicKey) === true;\n * ```\n */\nexport const secp256k1: CurveFnWithCreate = createCurve(\n  { ...secp256k1_CURVE, Fp: Fpk1, lowS: true, endo: secp256k1_ENDO },\n  sha256\n);\n\n// Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.\n// https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\n/** An object mapping tags to their tagged hash prefix of [SHA256(tag) | SHA256(tag)] */\nconst TAGGED_HASH_PREFIXES: { [tag: string]: Uint8Array } = {};\nfunction taggedHash(tag: string, ...messages: Uint8Array[]): Uint8Array {\n  let tagP = TAGGED_HASH_PREFIXES[tag];\n  if (tagP === undefined) {\n    const tagH = sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n    tagP = concatBytes(tagH, tagH);\n    TAGGED_HASH_PREFIXES[tag] = tagP;\n  }\n  return sha256(concatBytes(tagP, ...messages));\n}\n\n// ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03\nconst pointToBytes = (point: PointType<bigint>) => point.toBytes(true).slice(1);\nconst numTo32b = (n: bigint) => numberToBytesBE(n, 32);\nconst modP = (x: bigint) => mod(x, secp256k1_CURVE.p);\nconst modN = (x: bigint) => mod(x, secp256k1_CURVE.n);\nconst Point = /* @__PURE__ */ (() => secp256k1.Point)();\nconst hasEven = (y: bigint) => y % _2n === _0n;\n\n// Calculate point, scalar and bytes\nfunction schnorrGetExtPubKey(priv: PrivKey) {\n  // TODO: replace with Point.Fn.fromBytes(priv)\n  let d_ = _normFnElement(Point.Fn, priv);\n  let p = Point.BASE.multiply(d_); // P = d'⋅G; 0 < d' < n check is done inside\n  const scalar = hasEven(p.y) ? d_ : modN(-d_);\n  return { scalar, bytes: pointToBytes(p) };\n}\n/**\n * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.\n * @returns valid point checked for being on-curve\n */\nfunction lift_x(x: bigint): PointType<bigint> {\n  aInRange('x', x, _1n, secp256k1_CURVE.p); // Fail if x ≥ p.\n  const xx = modP(x * x);\n  const c = modP(xx * x + BigInt(7)); // Let c = x³ + 7 mod p.\n  let y = sqrtMod(c); // Let y = c^(p+1)/4 mod p.\n  if (!hasEven(y)) y = modP(-y); // Return the unique point P such that x(P) = x and\n  const p = Point.fromAffine({ x, y }); // y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.\n  p.assertValidity();\n  return p;\n}\nconst num = bytesToNumberBE;\n/**\n * Create tagged hash, convert it to bigint, reduce modulo-n.\n */\nfunction challenge(...args: Uint8Array[]): bigint {\n  return modN(num(taggedHash('BIP0340/challenge', ...args)));\n}\n\n/**\n * Schnorr public key is just `x` coordinate of Point as per BIP340.\n */\nfunction schnorrGetPublicKey(secretKey: Hex): Uint8Array {\n  return schnorrGetExtPubKey(secretKey).bytes; // d'=int(sk). Fail if d'=0 or d'≥n. Ret bytes(d'⋅G)\n}\n\n/**\n * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.\n * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.\n */\nfunction schnorrSign(message: Hex, secretKey: PrivKey, auxRand: Hex = randomBytes(32)): Uint8Array {\n  const m = ensureBytes('message', message);\n  const { bytes: px, scalar: d } = schnorrGetExtPubKey(secretKey); // checks for isWithinCurveOrder\n  const a = ensureBytes('auxRand', auxRand, 32); // Auxiliary random data a: a 32-byte array\n  const t = numTo32b(d ^ num(taggedHash('BIP0340/aux', a))); // Let t be the byte-wise xor of bytes(d) and hash/aux(a)\n  const rand = taggedHash('BIP0340/nonce', t, px, m); // Let rand = hash/nonce(t || bytes(P) || m)\n  const k_ = modN(num(rand)); // Let k' = int(rand) mod n\n  if (k_ === _0n) throw new Error('sign failed: k is zero'); // Fail if k' = 0.\n  const { bytes: rx, scalar: k } = schnorrGetExtPubKey(k_); // Let R = k'⋅G.\n  const e = challenge(rx, px, m); // Let e = int(hash/challenge(bytes(R) || bytes(P) || m)) mod n.\n  const sig = new Uint8Array(64); // Let sig = bytes(R) || bytes((k + ed) mod n).\n  sig.set(rx, 0);\n  sig.set(numTo32b(modN(k + e * d)), 32);\n  // If Verify(bytes(P), m, sig) (see below) returns failure, abort\n  if (!schnorrVerify(sig, m, px)) throw new Error('sign: Invalid signature produced');\n  return sig;\n}\n\n/**\n * Verifies Schnorr signature.\n * Will swallow errors & return false except for initial type validation of arguments.\n */\nfunction schnorrVerify(signature: Hex, message: Hex, publicKey: Hex): boolean {\n  const sig = ensureBytes('signature', signature, 64);\n  const m = ensureBytes('message', message);\n  const pub = ensureBytes('publicKey', publicKey, 32);\n  try {\n    const P = lift_x(num(pub)); // P = lift_x(int(pk)); fail if that fails\n    const r = num(sig.subarray(0, 32)); // Let r = int(sig[0:32]); fail if r ≥ p.\n    if (!inRange(r, _1n, secp256k1_CURVE.p)) return false;\n    const s = num(sig.subarray(32, 64)); // Let s = int(sig[32:64]); fail if s ≥ n.\n    if (!inRange(s, _1n, secp256k1_CURVE.n)) return false;\n    const e = challenge(numTo32b(r), pointToBytes(P), m); // int(challenge(bytes(r)||bytes(P)||m))%n\n    // R = s⋅G - e⋅P, where -eP == (n-e)P\n    const R = Point.BASE.multiplyUnsafe(s).add(P.multiplyUnsafe(modN(-e)));\n    const { x, y } = R.toAffine();\n    // Fail if is_infinite(R) / not has_even_y(R) / x(R) ≠ r.\n    if (R.is0() || !hasEven(y) || x !== r) return false;\n    return true;\n  } catch (error) {\n    return false;\n  }\n}\n\nexport type SecpSchnorr = {\n  keygen: (seed?: Uint8Array) => { secretKey: Uint8Array; publicKey: Uint8Array };\n  getPublicKey: typeof schnorrGetPublicKey;\n  sign: typeof schnorrSign;\n  verify: typeof schnorrVerify;\n  Point: WeierstrassPointCons<bigint>;\n  utils: {\n    randomSecretKey: (seed?: Uint8Array) => Uint8Array;\n    pointToBytes: (point: PointType<bigint>) => Uint8Array;\n    lift_x: typeof lift_x;\n    taggedHash: typeof taggedHash;\n\n    /** @deprecated use `randomSecretKey` */\n    randomPrivateKey: (seed?: Uint8Array) => Uint8Array;\n    /** @deprecated use `utils` */\n    numberToBytesBE: typeof numberToBytesBE;\n    /** @deprecated use `utils` */\n    bytesToNumberBE: typeof bytesToNumberBE;\n    /** @deprecated use `modular` */\n    mod: typeof mod;\n  };\n  info: { type: 'weierstrass'; publicKeyHasPrefix: false; lengths: CurveInfo['lengths'] };\n};\n/**\n * Schnorr signatures over secp256k1.\n * https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\n * @example\n * ```js\n * import { schnorr } from '@noble/curves/secp256k1';\n * const { secretKey, publicKey } = schnorr.keygen();\n * // const publicKey = schnorr.getPublicKey(secretKey);\n * const msg = new TextEncoder().encode('hello');\n * const sig = schnorr.sign(msg, secretKey);\n * const isValid = schnorr.verify(sig, msg, publicKey);\n * ```\n */\nexport const schnorr: SecpSchnorr = /* @__PURE__ */ (() => {\n  const size = 32;\n  const seedLength = 48;\n  const randomSecretKey = (seed = randomBytes(seedLength)): Uint8Array => {\n    return mapHashToField(seed, secp256k1_CURVE.n);\n  };\n  // TODO: remove\n  secp256k1.utils.randomSecretKey;\n  function keygen(seed?: Uint8Array) {\n    const secretKey = randomSecretKey(seed);\n    return { secretKey, publicKey: schnorrGetPublicKey(secretKey) };\n  }\n  return {\n    keygen,\n    getPublicKey: schnorrGetPublicKey,\n    sign: schnorrSign,\n    verify: schnorrVerify,\n    Point,\n    utils: {\n      randomSecretKey: randomSecretKey,\n      randomPrivateKey: randomSecretKey,\n      taggedHash,\n\n      // TODO: remove\n      lift_x,\n      pointToBytes,\n      numberToBytesBE,\n      bytesToNumberBE,\n      mod,\n    },\n    info: {\n      type: 'weierstrass',\n      publicKeyHasPrefix: false,\n      lengths: {\n        secret: size,\n        public: size,\n        signature: size * 2,\n        seed: seedLength,\n      },\n    },\n  };\n})();\n\nconst isoMap = /* @__PURE__ */ (() =>\n  isogenyMap(\n    Fpk1,\n    [\n      // xNum\n      [\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7',\n        '0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581',\n        '0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262',\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c',\n      ],\n      // xDen\n      [\n        '0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b',\n        '0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n      ],\n      // yNum\n      [\n        '0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c',\n        '0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3',\n        '0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931',\n        '0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84',\n      ],\n      // yDen\n      [\n        '0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b',\n        '0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573',\n        '0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n      ],\n    ].map((i) => i.map((j) => BigInt(j))) as [bigint[], bigint[], bigint[], bigint[]]\n  ))();\nconst mapSWU = /* @__PURE__ */ (() =>\n  mapToCurveSimpleSWU(Fpk1, {\n    A: BigInt('0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533'),\n    B: BigInt('1771'),\n    Z: Fpk1.create(BigInt('-11')),\n  }))();\n\n/** Hashing / encoding to secp256k1 points / field. RFC 9380 methods. */\nexport const secp256k1_hasher: H2CHasher<bigint> = /* @__PURE__ */ (() =>\n  createHasher(\n    secp256k1.Point,\n    (scalars: bigint[]) => {\n      const { x, y } = mapSWU(Fpk1.create(scalars[0]));\n      return isoMap(x, y);\n    },\n    {\n      DST: 'secp256k1_XMD:SHA-256_SSWU_RO_',\n      encodeDST: 'secp256k1_XMD:SHA-256_SSWU_NU_',\n      p: Fpk1.ORDER,\n      m: 1,\n      k: 128,\n      expand: 'xmd',\n      hash: sha256,\n    }\n  ))();\n\n/** @deprecated use `import { secp256k1_hasher } from '@noble/curves/secp256k1.js';` */\nexport const hashToCurve: H2CMethod<bigint> = /* @__PURE__ */ (() =>\n  secp256k1_hasher.hashToCurve)();\n\n/** @deprecated use `import { secp256k1_hasher } from '@noble/curves/secp256k1.js';` */\nexport const encodeToCurve: H2CMethod<bigint> = /* @__PURE__ */ (() =>\n  secp256k1_hasher.encodeToCurve)();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}